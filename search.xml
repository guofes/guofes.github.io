<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js垃圾回收机制</title>
      <link href="/2020/07/20/js%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/07/20/js%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>JavaScript 中的内存管理是自动执行的，是不可见的。创建基本类型、对象、函数都需要内存。</p><h2 id="可达性"><a href="#可达性" class="headerlink" title="可达性"></a>可达性</h2><p>JavaScript 中内存管理的主要概念是可达性。<br>简单地说，“可达性” 值就是那些以某种方式可访问或可用的值，它们被保证存储在内存中。</p><h5 id="1-有一组基本的固有可达值，由于显而易见的原因无法删除。例如"><a href="#1-有一组基本的固有可达值，由于显而易见的原因无法删除。例如" class="headerlink" title="1.有一组基本的固有可达值，由于显而易见的原因无法删除。例如:"></a>1.有一组基本的固有可达值，由于显而易见的原因无法删除。例如:</h5><ul><li>本地函数的局部变量和参数</li><li>当前嵌套调用链上的其他函数的变量和参数</li><li>全局变量</li><li>还有一些其他的，内部的</li></ul><p>这些值称为根。</p><h5 id="2-如果引用或引用链可以从根访问任何其他值，则认为该值是可访问的。"><a href="#2-如果引用或引用链可以从根访问任何其他值，则认为该值是可访问的。" class="headerlink" title="2. 如果引用或引用链可以从根访问任何其他值，则认为该值是可访问的。"></a>2. 如果引用或引用链可以从根访问任何其他值，则认为该值是可访问的。</h5><p>例如，如果局部变量中有对象，并且该对象具有引用另一个对象的属性，则该对象被视为可达性， 它引用的那些也是可以访问的，详细的例子如下。</p><p>JavaScript 引擎中有一个后台进程称为垃圾回收器，它监视所有对象，并删除那些不可访问的对象。</p><a id="more"></a><h5 id="3-一个简单的例子"><a href="#3-一个简单的例子" class="headerlink" title="3.一个简单的例子"></a>3.一个简单的例子</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; user 具有对象的引用</span><br><span class="line">let user &#x3D; &#123;</span><br><span class="line">  name: &quot;John&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">user &#x3D; null; &#x2F;&#x2F;如果 user 的值被覆盖，则引用丢失，会被回收</span><br></pre></td></tr></table></figure><p>现在 John 变成不可达的状态，没有办法访问它，没有对它的引用。垃圾回收器将丢弃 John 数据并释放内存。</p><h5 id="4-两个引用"><a href="#4-两个引用" class="headerlink" title="4.两个引用"></a>4.两个引用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; user具有对象的引用</span><br><span class="line">let user &#x3D; &#123;</span><br><span class="line">  name: &quot;John&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let admin &#x3D; user;</span><br><span class="line"></span><br><span class="line">user &#x3D; null; &#x2F;&#x2F; 该对象仍然可以通过 admin 全局变量访问，所以它在内存中。如果我们也覆盖admin，那么它可以被释放。</span><br></pre></td></tr></table></figure><h5 id="5-相互关联的对象"><a href="#5-相互关联的对象" class="headerlink" title="5.相互关联的对象"></a>5.相互关联的对象</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function marry (man, woman) &#123;</span><br><span class="line">  woman.husban &#x3D; man;</span><br><span class="line">  man.wife &#x3D; woman;</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    father: man,</span><br><span class="line">    mother: woman</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let family &#x3D; marry(&#123;</span><br><span class="line">  name: &quot;John&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  name: &quot;Ann&quot;</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F;  marry 通过给两个对象彼此提供引用来“联姻”它们，并返回一个包含两个对象的新对象。到目前为止，所有对象都是可访问的。</span><br><span class="line"></span><br><span class="line">delete family.father;</span><br><span class="line">delete family.mother.husband;</span><br><span class="line">&#x2F;&#x2F; 仅仅删除这两个引用中的一个是不够的，因为所有对象仍然是可访问的。</span><br><span class="line"></span><br><span class="line">family &#x3D; null;</span><br><span class="line">&#x2F;&#x2F; “family”对象已经从根上断开了链接，不再有对它的引用，因此下面的整个块变得不可到达，并将被删除。</span><br></pre></td></tr></table></figure><h2 id="内部算法"><a href="#内部算法" class="headerlink" title="内部算法"></a>内部算法</h2><h5 id="基本的垃圾回收算法称为“标记-清除”，定期执行以下“垃圾回收”步骤"><a href="#基本的垃圾回收算法称为“标记-清除”，定期执行以下“垃圾回收”步骤" class="headerlink" title="基本的垃圾回收算法称为“标记-清除”，定期执行以下“垃圾回收”步骤:"></a>基本的垃圾回收算法称为“标记-清除”，定期执行以下“垃圾回收”步骤:</h5><ul><li>垃圾回收器获取根并“标记”(记住)它们。</li><li>然后它访问并“标记”所有来自它们的引用。</li><li>然后它访问标记的对象并标记它们的引用。所有被访问的对象都被记住，以便以后不再访问同一个对象两次。</li><li>以此类推，直到有未访问的引用(可以从根访问)为止。</li><li>除标记的对象外，所有对象都被删除。</li></ul><h4 id="一些优化"><a href="#一些优化" class="headerlink" title="一些优化:"></a>一些优化:</h4><ul><li>分代回收——对象分为两组:“新对象”和“旧对象”。许多对象出现，完成它们的工作并迅速结 ，它们很快就会被清理干净。那些活得足够久的对象，会变“老”，并且很少接受检查。</li><li>增量回收——如果有很多对象，并且我们试图一次遍历并标记整个对象集，那么可能会花费一些时间，并在执行中会有一定的延迟。因此，引擎试图将垃圾回收分解为多个部分。然后，各个部分分别执行。这需要额外的标记来跟踪变化，这样有很多微小的延迟，而不是很大的延迟。</li><li>空闲时间收集——垃圾回收器只在 CPU 空闲时运行，以减少对执行的可能影响。</li></ul><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><p><a href="https://www.cnblogs.com/cwxwdm/p/10845376.html" target="_blank" rel="noopener">常见内存泄漏</a></p><h2 id="chrome查看JS内存使用情况"><a href="#chrome查看JS内存使用情况" class="headerlink" title="chrome查看JS内存使用情况"></a>chrome查看JS内存使用情况</h2><p><a href="https://www.cnblogs.com/liuzhaoting/articles/13182118.html" target="_blank" rel="noopener">chrome查看JS内存使用情况</a></p><p>参考：<a href="https://segmentfault.com/a/1190000018605776?utm_source=tag-newest" target="_blank" rel="noopener">前端面试：谈谈 JS 垃圾回收机制</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>执行上下文，作用域和闭包</title>
      <link href="/2020/01/07/%E4%B8%8A%E4%B8%8B%E6%96%87%EF%BC%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85/"/>
      <url>/2020/01/07/%E4%B8%8A%E4%B8%8B%E6%96%87%EF%BC%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="执行上下文（execution-context）"><a href="#执行上下文（execution-context）" class="headerlink" title="执行上下文（execution context）"></a>执行上下文（execution context）</h2><ul><li><p>n当代码运行时，会产生一个对应的执行环境，在这个环境中，所有变量会被事先提出来（变量提升），有的直接赋值，有的为默认值 undefined，代码从上往下开始执行，就叫做执行上下文。</p><p>Javascript 中代码的运行环境分为以下三种：</p></li><li><p>全局环境 - 这个是默认的代码运行环境，一旦代码被载入，引擎最先进入的就是这个环境。</p></li><li><p>函数环境 - 当执行一个函数时，运行函数体中的代码。</p></li><li><p>Eval - 在Eval函数内运行的代码。</p></li></ul><a id="more"></a><h3 id="js执行上下文特点"><a href="#js执行上下文特点" class="headerlink" title="js执行上下文特点"></a>js执行上下文特点</h3><p>　　1.单线程，在主进程上运行</p><p>　　2.同步执行，从上往下按顺序执行</p><p>　　3.全局上下文只有一个，浏览器关闭时会被弹出栈</p><p>　　4.函数的执行上下文没有数目限制</p><p>　　5.函数每被调用一次，都会产生一个新的执行上下文环境</p><h3 id="执行上下文生命周期"><a href="#执行上下文生命周期" class="headerlink" title="执行上下文生命周期"></a>执行上下文生命周期</h3><p>　　<br>　　如图所示，执行上下文共分3个阶段，分别是：</p><p>　　　　1.创建阶段</p><p>　　　　　　(1).生成变量对象</p><p>　　　　　　(2).建立作用域链</p><p>　　　　　　(3).确定 this 指向</p><p>　　　　2.执行阶段</p><p>　　　　　　(1).变量赋值</p><p>　　　　　　(2).函数引用</p><p>　　　　　　(3).执行其他代码</p><p>　　　　3.销毁阶段</p><p>　　　　　　执行完毕出栈，等待回收被销毁</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><ul><li>作用域有上下级的关系，会在当前作用域中寻找变量，如果找不到会沿着创建时作用域链一直往上找，直到找到全局作用域</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var a&#x3D;1;</span><br><span class="line">function f1()&#123;</span><br><span class="line">   var b&#x3D;2;   </span><br><span class="line">   function f2()&#123; </span><br><span class="line">     var c&#x3D;3;</span><br><span class="line">     console.log(a,b,c);</span><br><span class="line">&#125;  </span><br><span class="line">f2();</span><br><span class="line">&#125;</span><br><span class="line">f1();&#x2F;&#x2F;1 ,2 ,3</span><br></pre></td></tr></table></figure><h3 id="变量声明提升和函数声明提升"><a href="#变量声明提升和函数声明提升" class="headerlink" title="变量声明提升和函数声明提升"></a>变量声明提升和函数声明提升</h3><ul><li>代码被执行前会有声明提升的过程。只有声明本身会被提升，任何作用域都会进行提升操作。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    console.log(a);</span><br><span class="line">    var a &#x3D; 2;  </span><br><span class="line">&#125;</span><br><span class="line">实际上被解析成如下：</span><br><span class="line">&#123;</span><br><span class="line">        var a;</span><br><span class="line">    console.log(a);</span><br><span class="line">    a &#x3D; 2;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><ul><li>在一个函数内部定义的另一个函数，当内部函数在包裹他的函数之外被执行时，就会形成闭包。同时内部函数仍然可以访问到包裹函数中的局部变量与函数。</li></ul><p>闭包的两个常见用途</p><ul><li><ol><li>函数作为返回值</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">封装变量 避免全局中被修改 ，并且记录状态。状态不会销毁丢失</span><br><span class="line">function isFirst() &#123;</span><br><span class="line">    var _list &#x3D; [];</span><br><span class="line">    return function(id) &#123;</span><br><span class="line">        if(_list.includes(id)) &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125; </span><br><span class="line">        _list.push(id)</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var first &#x3D; isFirst()</span><br><span class="line">first(10) &#x2F;&#x2F; true</span><br><span class="line">first(10) &#x2F;&#x2F; false</span><br><span class="line">first(20) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><ol start="2"><li>函数作为参数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function wait(message) &#123;</span><br><span class="line">    setTimeout(function timer() &#123;</span><br><span class="line">        console.log(message);</span><br><span class="line">    &#125;, 1000) </span><br><span class="line">&#125;</span><br><span class="line">wait(&#39;hello&#39;);</span><br></pre></td></tr></table></figure><ul><li>timer 函数传递给setTimeout(),timer就具有了涵盖wait()作用域的闭包，因此保有对变量message的引用，等到1000回调执行后，wait的内部作用域不会消失<blockquote><p>在定时器、事件监听器、Ajax请求、跨窗口通信、webworker、或者其他的异步或者同步的任务中，只要使用了回调函数，实际上就在使用闭包</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通用的数据类型判断方法</title>
      <link href="/2020/01/05/%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD%E6%96%B9%E6%B3%95/"/>
      <url>/2020/01/05/%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">var str1 &#x3D; &#39;abc&#39;</span><br><span class="line">var num1 &#x3D; 123</span><br><span class="line">var bool1 &#x3D; true</span><br><span class="line">var arr1 &#x3D; [1, 2, 3]</span><br><span class="line">var obj1 &#x3D; &#123;name: &#39;jack&#39;, say: function () &#123;  &#125;&#125;</span><br><span class="line">var fun1 &#x3D; function () &#123;&#125;</span><br><span class="line">var un1 &#x3D; undefined</span><br><span class="line">var null1 &#x3D; null</span><br><span class="line">var nan1 &#x3D; NaN</span><br><span class="line"></span><br><span class="line">var log &#x3D; console.log</span><br><span class="line"></span><br><span class="line">log(Object.prototype.toString.call(str1))</span><br><span class="line">log(Object.prototype.toString.call(num1))</span><br><span class="line">log(Object.prototype.toString.call(bool1))</span><br><span class="line">log(Object.prototype.toString.call(arr1))</span><br><span class="line">log(Object.prototype.toString.call(obj1))</span><br><span class="line">log(Object.prototype.toString.call(fun1))</span><br><span class="line">log(Object.prototype.toString.call(un1))</span><br><span class="line">log(Object.prototype.toString.call(null1))</span><br><span class="line">log(Object.prototype.toString.call(nan1))</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; print: </span><br><span class="line">&#x2F;&#x2F; [object String]</span><br><span class="line">&#x2F;&#x2F; [object Number]</span><br><span class="line">&#x2F;&#x2F; [object Boolean]</span><br><span class="line">&#x2F;&#x2F; [object Array]</span><br><span class="line">&#x2F;&#x2F; [object Object]</span><br><span class="line">&#x2F;&#x2F; [object Function]</span><br><span class="line">&#x2F;&#x2F; [object Undefined]</span><br><span class="line">&#x2F;&#x2F; [object Null]</span><br><span class="line">&#x2F;&#x2F; [object Number]</span><br></pre></td></tr></table></figure><h1 id="jquery-type"><a href="#jquery-type" class="headerlink" title="jquery.type()"></a>jquery.type()</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">如果对象是undefined或null，则返回相应的“undefined”或“null”。</span><br><span class="line">jQuery.type( undefined ) &#x3D;&#x3D;&#x3D; &quot;undefined&quot;</span><br><span class="line">jQuery.type() &#x3D;&#x3D;&#x3D; &quot;undefined&quot;</span><br><span class="line">jQuery.type( window.notDefined ) &#x3D;&#x3D;&#x3D; &quot;undefined&quot;</span><br><span class="line">jQuery.type( null ) &#x3D;&#x3D;&#x3D; &quot;null&quot;</span><br><span class="line">如果对象有一个内部的[[Class]]和一个浏览器的内置对象的 [[Class]] 相同，我们返回相应的 [[Class]] 名字。 (有关此技术的更多细节。 )</span><br><span class="line">jQuery.type( true ) &#x3D;&#x3D;&#x3D; &quot;boolean&quot;</span><br><span class="line">jQuery.type( 3 ) &#x3D;&#x3D;&#x3D; &quot;number&quot;</span><br><span class="line">jQuery.type( &quot;test&quot; ) &#x3D;&#x3D;&#x3D; &quot;string&quot;</span><br><span class="line">jQuery.type( function()&#123;&#125; ) &#x3D;&#x3D;&#x3D; &quot;function&quot;</span><br><span class="line">jQuery.type( [] ) &#x3D;&#x3D;&#x3D; &quot;array&quot;</span><br><span class="line">jQuery.type( new Date() ) &#x3D;&#x3D;&#x3D; &quot;date&quot;</span><br><span class="line">jQuery.type( new Error() ) &#x3D;&#x3D;&#x3D; &quot;error&quot; &#x2F;&#x2F; as of jQuery 1.9</span><br><span class="line">jQuery.type( &#x2F;test&#x2F; ) &#x3D;&#x3D;&#x3D; &quot;regexp&quot;</span><br><span class="line">其他一切都将返回它的类型“object”。</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this指向的几种情况</title>
      <link href="/2020/01/04/is%E6%8C%87%E5%90%91%E7%9A%84%E5%87%A0%E7%A7%8D%E6%83%85%E5%86%B5/"/>
      <url>/2020/01/04/is%E6%8C%87%E5%90%91%E7%9A%84%E5%87%A0%E7%A7%8D%E6%83%85%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<ul><li>哪个对象调用函数，函数里面的this指向哪个对象。</li></ul><p>分几种情况谈论下</p><h2 id="普通函数调用"><a href="#普通函数调用" class="headerlink" title="普通函数调用"></a>普通函数调用</h2><ul><li>这个情况没特殊意外，就是指向全局对象-window。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var username&#x3D;&#39;cn&#39;</span><br><span class="line">function fn()&#123;</span><br><span class="line">    alert(this.username);&#x2F;&#x2F;undefined</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">var username&#x3D;&#39;cn&#39;</span><br><span class="line">function fn()&#123;</span><br><span class="line">    alert(this.username);&#x2F;&#x2F;cn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="对象函数调用"><a href="#对象函数调用" class="headerlink" title="对象函数调用"></a>对象函数调用</h2><ul><li>哪个函数调用，this指向哪里</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">window.b&#x3D;2222</span><br><span class="line">let obj&#x3D;&#123;</span><br><span class="line">    a:111,</span><br><span class="line">    fn:function()&#123;</span><br><span class="line">        alert(this.a);&#x2F;&#x2F;111</span><br><span class="line">        alert(this.b);&#x2F;&#x2F;undefined</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.fn();</span><br></pre></td></tr></table></figure><p>下面这种情况虽然obj1.fn是从obj2.fn赋值而来，但是调用函数的是obj1，所以this指向obj1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let obj1&#x3D;&#123;</span><br><span class="line">        a:222</span><br><span class="line">    &#125;;</span><br><span class="line">    let obj2&#x3D;&#123;</span><br><span class="line">        a:111,</span><br><span class="line">        fn:function()&#123;</span><br><span class="line">            alert(this.a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    obj1.fn&#x3D;obj2.fn;</span><br><span class="line">    obj1.fn();&#x2F;&#x2F;222</span><br></pre></td></tr></table></figure><h2 id="构造函数调用"><a href="#构造函数调用" class="headerlink" title="构造函数调用"></a>构造函数调用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let TestClass&#x3D;function()&#123;</span><br><span class="line">    this.name&#x3D;&#39;111&#39;;</span><br><span class="line">&#125;</span><br><span class="line">let subClass&#x3D;new TestClass();</span><br><span class="line">subClass.name&#x3D;&#39;cn&#39;;</span><br><span class="line">console.log(subClass.name);&#x2F;&#x2F;cn</span><br><span class="line">let subClass1&#x3D;new TestClass();</span><br><span class="line">console.log(subClass1.name)&#x2F;&#x2F;111</span><br></pre></td></tr></table></figure><h2 id="apply和call调用"><a href="#apply和call调用" class="headerlink" title="apply和call调用"></a>apply和call调用</h2><p>apply和call简单来说就是会改变传入函数的this。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let obj1&#x3D;&#123;</span><br><span class="line">    a:222</span><br><span class="line">&#125;;</span><br><span class="line">let obj2&#x3D;&#123;</span><br><span class="line">    a:111,</span><br><span class="line">    fn:function()&#123;</span><br><span class="line">        alert(this.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj2.fn.call(obj1);111</span><br></pre></td></tr></table></figure><ul><li>call 和 apply 的作用，完全一样，唯一的区别就是在参数上面。</li><li>call 接收的参数不固定，第一个参数是函数体内 this 的指向，第二个参数以下是依次传入的参数。</li><li>napply接收两个参数，第一个参数也是函数体内 this 的指向。第二个参数是一个集合对象（数组或者类数组）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let fn&#x3D;function(a,b,c)&#123;</span><br><span class="line">console.log(a,b,c);</span><br><span class="line">&#125;</span><br><span class="line">let arr&#x3D;[1,2,3];</span><br><span class="line">fn.call(window, arr) &#x2F;&#x2F; [1,2,3]</span><br><span class="line">fn.apply &#x2F;&#x2F; 1, 2, 3</span><br></pre></td></tr></table></figure><p>call 和 apply 两个主要用途就是</p><p>1.改变 this 的指向（把 this 从 obj2 指向到 obj1 ）</p><p>2.方法借用（ obj1 没有 fn ，只是借用 obj2 方法）</p><h2 id="箭头函数调用"><a href="#箭头函数调用" class="headerlink" title="箭头函数调用"></a>箭头函数调用</h2><p>箭头函数里面，没有 this ，箭头函数里面的 this 是继承外面的环境。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let obj&#x3D;&#123;</span><br><span class="line">    a:222,</span><br><span class="line">    fn:function()&#123;    </span><br><span class="line">        setTimeout(function()&#123;console.log(this.a)&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.fn();&#x2F;&#x2F;undefined</span><br></pre></td></tr></table></figure><p>虽然 fn() 里面的 this 是指向 obj ，但是，传给 setTimeout 的是普通函数， this 指向是 window ， window 下面没有 a ，所以这里输出 undefined。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let obj&#x3D;&#123;</span><br><span class="line">    a:222,</span><br><span class="line">    fn:function()&#123;    </span><br><span class="line">        setTimeout(()&#x3D;&gt;&#123;console.log(this.a)&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.fn();&#x2F;&#x2F;222</span><br></pre></td></tr></table></figure><p>输出 222 是因为，传给 setTimeout 的是箭头函数，然后箭头函数里面没有 this ，所以要向上层作用域查找，在这个例子上， setTimeout 的上层作用域是 fn。而 fn 里面的 this 指向 obj ，所以 setTimeout 里面的箭头函数的 this ，指向 obj 。所以输出 222 。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型链和继承</title>
      <link href="/2020/01/04/%E5%9E%8B%E9%93%BE%E5%92%8C%E7%BB%A7%E6%89%BF/"/>
      <url>/2020/01/04/%E5%9E%8B%E9%93%BE%E5%92%8C%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><h3 id="构造函数、原型与实例之间的关系"><a href="#构造函数、原型与实例之间的关系" class="headerlink" title="构造函数、原型与实例之间的关系"></a>构造函数、原型与实例之间的关系</h3><ul><li><p>每创建一个函数，该函数就会自动带有一个 prototype 属性。该属性是个指针，指向了一个对象，我们称之为 原型对象</p></li><li><p>原型对象上默认有一个属性 constructor，该属性也是一个指针，指向其相关联的构造函数。</p></li><li><p>通过调用构造函数产生的实例，都有一个内部属性，指向了原型对象。所以实例能够访问原型对象上的所有属性和方法。</p></li><li><p>所以三者的关系是，每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。通俗点说就是，实例通过内部指针可以访问到原型对象，原型对象通过constructor指针，又可以找到构造函数。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Dog (name) &#123;</span><br><span class="line">    this.name &#x3D; name;</span><br><span class="line">    this.type &#x3D; &#39;Dog&#39;; </span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype.speak &#x3D; function () &#123;</span><br><span class="line">　　alert(&#39;wang&#39;);</span><br><span class="line">&#125;</span><br><span class="line">var doggie &#x3D; new Dog(&#39;jiwawa&#39;);</span><br><span class="line">doggie.speak();  &#x2F;&#x2F;wang</span><br></pre></td></tr></table></figure><a id="more"></a><p>以上代码定义了一个构造函数 Dog(),  Dog.prototype 指向的原型对象，其自带的属性construtor又指回了 Dog，即  Dog.prototype.constructor == Dog. 实例doggie由于其内部指针指向了该原型对象，所以可以访问到 speak方法。</p><p><img src="/images/lalala.png" alt="盒子模型"></p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul><li>构造函数与其他函数唯一的区别在于调用方式不同。任何函数只要通过new来调用就可以作为构造函数，它是用来创建特定类型的对象。</li></ul><p>下面定义一个构造函数 Female：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function Female(name)&#123;</span><br><span class="line">     this.name &#x3D; name;</span><br><span class="line">    this.sex &#x3D; &#39;female&#39;;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>通过new命令来生成一个person实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var person1 &#x3D; new Female(&quot;Summer&quot;)</span><br></pre></td></tr></table></figure><p>new做的事情</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1。不用手动新建一个obj ，new会帮你创建</span><br><span class="line"></span><br><span class="line">2。不用把新建的obj的__proto__指向构造函数Common的prototype,new会帮你做。</span><br><span class="line"></span><br><span class="line">3。构造函数this的作用域会指向实例本身。</span><br><span class="line"></span><br><span class="line">4。不用手动return新建的obj，new会帮你return。</span><br><span class="line"></span><br><span class="line">5。new出来的实例的__proto__会指向构造函数的prototype。构造函数的方法，实例可以直接调用。</span><br></pre></td></tr></table></figure><p>结论：原型对象（Person.prototype）是 构造函数（Person）的一个实例。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>1.借助构造函数（部分继承）</p><ul><li>将父类构造函数的this指向子类的构造函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function father () &#123; this.name &#x3D; &#39;name&#39;&#125;</span><br><span class="line">function son () &#123; farher.call(this),this.type &#x3D; &#39;child&#39;&#125;</span><br><span class="line">new son()</span><br></pre></td></tr></table></figure></li></ul><p>2.借助原型链（全部继承）</p><ul><li>不同对象时，共用原型对象会改变prototype属性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function father ()</span><br><span class="line"></span><br><span class="line">function child ()</span><br><span class="line"></span><br><span class="line">child.prototype &#x3D; new father ()</span><br></pre></td></tr></table></figure><p>3上面两个都用</p><ul><li>构造函数执行了两次</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function father () &#123; this.name &#x3D; &#39;name&#39;&#125;</span><br><span class="line">function child () &#123; farher.call(this),this.type &#x3D; &#39;child&#39;&#125;</span><br><span class="line">child.prototype &#x3D; new father ()</span><br></pre></td></tr></table></figure><p>4 优化</p><ul><li>无法判断是谁的实例化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function father () &#123; this.name &#x3D; &#39;name&#39;&#125;</span><br><span class="line">function child () &#123; farher.call(this),this.type &#x3D; &#39;child&#39;&#125;</span><br><span class="line">child.prototype &#x3D; father.prototype</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/sarahwang/p/6870072.html" target="_blank" rel="noopener">js继承之原型继承</a></p><p><a href="https://blog.csdn.net/black____white/article/details/87912251" target="_blank" rel="noopener">js原型链详解</a></p><p><a href="https://www.cnblogs.com/xxflz/p/10438519.html" target="_blank" rel="noopener">JS原型与原型链继承的理解</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>箭头函数</title>
      <link href="/2020/01/04/%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
      <url>/2020/01/04/%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><ul><li>ES6 允许使用“箭头”（=&gt;）定义函数。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var f &#x3D; v &#x3D;&gt; v;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">var f &#x3D; function (v) &#123;</span><br><span class="line">  return v;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。</li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var f &#x3D; () &#x3D;&gt; 5;</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">var f &#x3D; function () &#123; return 5 &#125;;</span><br><span class="line"></span><br><span class="line">var sum &#x3D; (num1, num2) &#x3D;&gt; num1 + num2;</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">var sum &#x3D; function(num1, num2) &#123;</span><br><span class="line">  return num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var sum &#x3D; (num1, num2) &#x3D;&gt; &#123; return num1 + num2; &#125;</span><br></pre></td></tr></table></figure><ul><li>由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">let getTempItem &#x3D; id &#x3D;&gt; &#123; id: id, name: &quot;Temp&quot; &#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 不报错</span><br><span class="line">let getTempItem &#x3D; id &#x3D;&gt; (&#123; id: id, name: &quot;Temp&quot; &#125;);</span><br><span class="line"></span><br><span class="line">下面是一种特殊情况，虽然可以运行，但会得到错误的结果。</span><br><span class="line"></span><br><span class="line">let foo &#x3D; () &#x3D;&gt; &#123; a: 1 &#125;;</span><br><span class="line">foo() &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure><ul><li><p>上面代码中，原始意图是返回一个对象{ a: 1 }，但是由于引擎认为大括号是代码块，所以执行了一行语句a: 1。这时，a可以被解释为语句的标签，因此实际执行的语句是1;，然后函数就结束了，没有返回值。</p></li><li><p>如果箭头函数只有一行语句，且不需要返回值，可以采用下面的写法，就不用写大括号了。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let fn &#x3D; () &#x3D;&gt; void doesNotReturn();</span><br></pre></td></tr></table></figure><ul><li>箭头函数可以与变量解构结合使用。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const full &#x3D; (&#123; first, last &#125;) &#x3D;&gt; first + &#39; &#39; + last;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">function full(person) &#123;</span><br><span class="line">  return person.first + &#39; &#39; + person.last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>箭头函数使得表达更加简洁。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const isEven &#x3D; n &#x3D;&gt; n % 2 &#x3D;&#x3D;&#x3D; 0;</span><br><span class="line">const square &#x3D; n &#x3D;&gt; n * n;</span><br></pre></td></tr></table></figure><ul><li><p>上面代码只用了两行，就定义了两个简单的工具函数。如果不用箭头函数，可能就要占用多行，而且还不如现在这样写醒目。</p></li><li><p>箭头函数的一个用处是简化回调函数。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 正常函数写法</span><br><span class="line">[1,2,3].map(function (x) &#123;</span><br><span class="line">  return x * x;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 箭头函数写法</span><br><span class="line">[1,2,3].map(x &#x3D;&gt; x * x);</span><br></pre></td></tr></table></figure><ul><li>另一个例子是</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 正常函数写法</span><br><span class="line">var result &#x3D; values.sort(function (a, b) &#123;</span><br><span class="line">  return a - b;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 箭头函数写法</span><br><span class="line">var result &#x3D; values.sort((a, b) &#x3D;&gt; a - b);</span><br></pre></td></tr></table></figure><ul><li>下面是 rest 参数与箭头函数结合的例子。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const numbers &#x3D; (...nums) &#x3D;&gt; nums;</span><br><span class="line"></span><br><span class="line">numbers(1, 2, 3, 4, 5)</span><br><span class="line">&#x2F;&#x2F; [1,2,3,4,5]</span><br><span class="line"></span><br><span class="line">const headAndTail &#x3D; (head, ...tail) &#x3D;&gt; [head, tail];</span><br><span class="line"></span><br><span class="line">headAndTail(1, 2, 3, 4, 5)</span><br><span class="line">&#x2F;&#x2F; [1,[2,3,4,5]]</span><br></pre></td></tr></table></figure><h2 id="使用注意点"><a href="#使用注意点" class="headerlink" title="使用注意点"></a>使用注意点</h2><ul><li><p>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</p></li><li><p>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</p></li><li><p>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p></li><li><p>（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</p></li></ul><p>上面四点中，第一点尤其值得注意。this对象的指向是可变的，但是在箭头函数中，它是固定的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;id:&#39;, this.id);</span><br><span class="line">  &#125;, 100);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var id &#x3D; 21;</span><br><span class="line"></span><br><span class="line">foo.call(&#123; id: 42 &#125;);</span><br><span class="line">&#x2F;&#x2F; id: 42</span><br><span class="line">&#x2F;&#x2F;如果是普通函数，执行时this应该指向全局对象window，这时应该输出21(因为setTimeout)</span><br></pre></td></tr></table></figure><h2 id="不使用场合"><a href="#不使用场合" class="headerlink" title="不使用场合"></a>不使用场合</h2><ul><li>第一个场合是定义对象的方法，且该方法内部包括this。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const cat &#x3D; &#123;</span><br><span class="line">  lives: 9,</span><br><span class="line">  jumps: () &#x3D;&gt; &#123;</span><br><span class="line">    this.lives--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二个场合是需要动态this的时候，也不应使用箭头函数。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var button &#x3D; document.getElementById(&#39;press&#39;);</span><br><span class="line">button.addEventListener(&#39;click&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">  this.classList.toggle(&#39;on&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深拷贝浅拷贝详解</title>
      <link href="/2019/12/28/%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/12/28/%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>在js中 Array 和 Object  这种引用类型的值，当把一个变量赋值给另一个变量时，这个值得副本其实是一个指针，这是两个变量的指针指向的是同一片推内存，当我们改变其中一个值的时候，另一个值也会受到影响。</p><p>那么这就分为两种情况，浅拷贝和深拷贝</p><h2 id="浅拷贝：拷贝对象的引用"><a href="#浅拷贝：拷贝对象的引用" class="headerlink" title="浅拷贝：拷贝对象的引用"></a>浅拷贝：拷贝对象的引用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 对象</span><br><span class="line">var obj1 &#x3D; &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: 2</span><br><span class="line">&#125;;</span><br><span class="line">var obj2 &#x3D; obj1;</span><br><span class="line"></span><br><span class="line">obj2.a &#x3D; 3;</span><br><span class="line"></span><br><span class="line">console.log(obj1); &#x2F;&#x2F; &#123;a: 3, b； 2&#125;</span><br><span class="line">console.log(obj2); &#x2F;&#x2F; &#123;a: 3, b: 2&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 数组</span><br><span class="line">var arr1 &#x3D; [1, 2, 3];</span><br><span class="line">var arr2 &#x3D; arr1;</span><br><span class="line"></span><br><span class="line">arr2.push(4);</span><br><span class="line"></span><br><span class="line">console.log(arr1); &#x2F;&#x2F; [1, 2, 3, 4]</span><br><span class="line">console.log(arr2); &#x2F;&#x2F; [1, 2, 3 ,4]</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="深拷贝：拷贝对象的实例"><a href="#深拷贝：拷贝对象的实例" class="headerlink" title="深拷贝：拷贝对象的实例"></a>深拷贝：拷贝对象的实例</h2><p>深拷贝就是拷贝出一个新的实例，新的实例与原来的实例互不影响，实现深拷贝的方法有几种：</p><ul><li><p>1、使用jq 的第三个参数来递归调用 $.extend(true, obj, …)，或者是lodash等第三方库函数实现</p></li><li><p>2、自己实现一个深拷贝，自己实现也有两种方法，一种是使用递归的方式拷贝，另一种是JSON.parse和JSON.stringfy</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 递归实现深拷贝</span><br><span class="line">function deepClone(source) &#123;</span><br><span class="line">    if (!source || typeof source !&#x3D;&#x3D; &#39;object&#39;) &#123;</span><br><span class="line">        throw new Error(&#39;error&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">    var resultObj &#x3D; source.constructor &#x3D;&#x3D;&#x3D; Array ? [] : &#123;&#125;;</span><br><span class="line">    for (var keys in source) &#123;</span><br><span class="line">        if (source.hasOwnProperty(keys)) &#123;</span><br><span class="line">            if (source[keys] &amp;&amp; typeof source[keys] &#x3D;&#x3D;&#x3D; &#39;object&#39;) &#123;</span><br><span class="line">                resultObj[keys] &#x3D; source[keys].constructor &#x3D;&#x3D;&#x3D; Array ? [] : &#123;&#125;;</span><br><span class="line">                resultObj[keys] &#x3D; deepClone(source[keys]);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                resultObj[keys] &#x3D; source[keys];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return resultObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a1 &#x3D; &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: [1, 2],</span><br><span class="line">    c: &#123;</span><br><span class="line">        a: 1,</span><br><span class="line">        b: 2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var a2 &#x3D; deepClone(a1);</span><br><span class="line">a2.b.push(3)</span><br><span class="line"></span><br><span class="line">console.log(a1); &#x2F;&#x2F; &#123;a: 1, b: [1, 2], c: &#123;a: 1, b: 2&#125;&#125;</span><br><span class="line">console.log(a2); &#x2F;&#x2F; &#123;a: 1, b: [1, 2, 3], c: &#123;a: 1, b: 2&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="循环引用问题"><a href="#循环引用问题" class="headerlink" title="循环引用问题"></a>循环引用问题</h4><p>上面的问题看似解决了所有的问题，但是有一种情况会有问题，就是循环引用。</p><h5 id="1-父级引用"><a href="#1-父级引用" class="headerlink" title="1. 父级引用"></a>1. 父级引用</h5><p>父级引用是指，当某个属性的值正好是这个对象本身，如果我们用上面的方法进行深拷贝，就会在子元素 -&gt; 父元素 -&gt; 子元素 …之间死循环，最后导致栈溢出。比如下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a1 &#x3D; &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: 2</span><br><span class="line">&#125;;</span><br><span class="line">a1.c &#x3D; a1;</span><br><span class="line">var result &#x3D; deepClone(a1); &#x2F;&#x2F; Uncaught RangeError: Maximum call stack size exceeded</span><br></pre></td></tr></table></figure><p>解决办法：就是判断一个对象的字段是否引入了这个对象或者这个对象的任意父级，那么就需要修改上面的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">function deepClone2(source, parent &#x3D; null) &#123;</span><br><span class="line">    if (!source || typeof source !&#x3D;&#x3D; &#39;object&#39;) &#123;</span><br><span class="line">        throw new Error(&#39;error&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">    var resultObj &#x3D; source.constructor &#x3D;&#x3D;&#x3D; Array ? [] : &#123;&#125;;</span><br><span class="line">    var _parent &#x3D; parent;</span><br><span class="line">    while (_parent) &#123;</span><br><span class="line">        if (_parent.originParent &#x3D;&#x3D;&#x3D; source) &#123;</span><br><span class="line">            return _parent.currentParent;</span><br><span class="line">        &#125;</span><br><span class="line">        _parent &#x3D; _parent.parent;</span><br><span class="line">    &#125;</span><br><span class="line">    for (var keys in source) &#123;</span><br><span class="line">        if (source.hasOwnProperty(keys)) &#123;</span><br><span class="line">            if (source[keys] &amp;&amp; typeof source[keys] &#x3D;&#x3D;&#x3D; &#39;object&#39;) &#123;</span><br><span class="line">                resultObj[keys] &#x3D; source[keys].constructor &#x3D;&#x3D;&#x3D; Array ? [] : &#123;&#125;;</span><br><span class="line">                resultObj[keys] &#x3D; deepClone2(source[keys], &#123;</span><br><span class="line">                    originParent: source,</span><br><span class="line">                    currentParent: resultObj,</span><br><span class="line">                    parent: parent</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                resultObj[keys] &#x3D; source[keys];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return resultObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a1 &#x3D; &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: 2</span><br><span class="line">&#125;;</span><br><span class="line">a1.c &#x3D; a1;</span><br><span class="line">var result &#x3D; deepClone2(a1);</span><br><span class="line">console.log(a1) &#x2F;&#x2F; &#123;a: 1, b: 2, c: &#123;…&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="2-同级引用"><a href="#2-同级引用" class="headerlink" title="2. 同级引用"></a>2. 同级引用</h5><p>假设有如下代码’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;</span><br><span class="line">    a: &#123;</span><br><span class="line">        name: &#39;a&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    b: &#123;</span><br><span class="line">        name: &#39;b&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    c: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.c.d &#x3D; obj.a;</span><br><span class="line">console.log(obj.c.d &#x3D;&#x3D;&#x3D; obj.a); &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><p>如果我们调用上面的deepClone2函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var copy &#x3D; deepClone2(obj);</span><br><span class="line">console.log(copy.a); &#x2F;&#x2F; &#123;name: &quot;a&quot;&#125;</span><br><span class="line">console.log(copy.c.d); &#x2F;&#x2F; &#123;name: &quot;a&quot;&#125;</span><br><span class="line">console.log(copy.a &#x3D;&#x3D;&#x3D; copy.c.d); &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure><p>从上面可以看出，虽然 copy.a 与 copy.c.d是的值是相等的，但二者引用的并不是同一个对象。</p><p>这种情况是因为 obj.a 并不在obj.c.d 的对象链上，所以 deepClone2 函数就无法检测到 obj.c.d 对 obj.a 也是一种引用关系，所以 deepClone2 函数就将 obj.a 深拷贝的结果赋值给了copy.c.d。</p><p>解决方案：父级的引用是一种引用，非父级的引用也是一种引用，那么只要记录下对象A中的所有对象，并与新创建的对象一一对应即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">function deepClone3(obj) &#123;</span><br><span class="line">    &#x2F;&#x2F; hash表，记录所有的对象的引用关系</span><br><span class="line">    let map &#x3D; new WeakMap();</span><br><span class="line">    function dp(obj) &#123;</span><br><span class="line">        let result &#x3D; null;</span><br><span class="line">        let keys &#x3D; Object.keys(obj);</span><br><span class="line">        let key &#x3D; null,</span><br><span class="line">            temp &#x3D; null,</span><br><span class="line">            existobj &#x3D; null;</span><br><span class="line"></span><br><span class="line">        existobj &#x3D; map.get(obj);</span><br><span class="line">        &#x2F;&#x2F;如果这个对象已经被记录则直接返回</span><br><span class="line">        if(existobj) &#123;</span><br><span class="line">            return existobj;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        result &#x3D; &#123;&#125;</span><br><span class="line">        map.set(obj, result);</span><br><span class="line"></span><br><span class="line">        for(let i &#x3D;0,len&#x3D;keys.length;i&lt;len;i++) &#123;</span><br><span class="line">            key &#x3D; keys[i];</span><br><span class="line">            temp &#x3D; obj[key];</span><br><span class="line">            if(temp &amp;&amp; typeof temp &#x3D;&#x3D;&#x3D; &#39;object&#39;) &#123;</span><br><span class="line">                result[key] &#x3D; dp(temp);</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                result[key] &#x3D; temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var obj &#x3D; &#123;</span><br><span class="line">    a: &#123;</span><br><span class="line">        name: &#39;a&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    b: &#123;</span><br><span class="line">        name: &#39;b&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    c: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 子级引用</span><br><span class="line">var copy &#x3D; deepClone3(obj);</span><br><span class="line">console.log(copy.a); &#x2F;&#x2F; &#123;name: &quot;a&quot;&#125;</span><br><span class="line">console.log(copy.c.d); &#x2F;&#x2F; &#123;name: &quot;a&quot;&#125;</span><br><span class="line">console.log(copy.a &#x3D;&#x3D;&#x3D; copy.c.d); &#x2F;&#x2F; true</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 父级引用</span><br><span class="line">var a1 &#x3D; &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: 2</span><br><span class="line">&#125;;</span><br><span class="line">a1.c &#x3D; a1;</span><br><span class="line">var result &#x3D; deepClone3(a1);</span><br><span class="line">console.log(a1) &#x2F;&#x2F; &#123;a: 1, b: 2, c: &#123;…&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2019/12/28/%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2019/12/28/%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式-JavaScript-RegExp-对象"><a href="#正则表达式-JavaScript-RegExp-对象" class="headerlink" title="正则表达式(JavaScript RegExp 对象)"></a>正则表达式(JavaScript RegExp 对象)</h1><ul><li>描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等<blockquote><p>构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。</p><blockquote><p>正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p></blockquote></blockquote></li></ul><h2 id="常用的正则字符"><a href="#常用的正则字符" class="headerlink" title="常用的正则字符"></a>常用的正则字符</h2><h3 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h3><ul><li>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</li></ul><h3 id="非打印字符-元字符"><a href="#非打印字符-元字符" class="headerlink" title="非打印字符|元字符"></a>非打印字符|元字符</h3><ul><li>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">字符 描述</span><br><span class="line">\cx 匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 &#39;c&#39; 字符。</span><br><span class="line">\f 匹配一个换页符。等价于 \x0c 和 \cL。</span><br><span class="line">\n 匹配一个换行符。等价于 \x0a 和 \cJ。</span><br><span class="line">\r 匹配一个回车符。等价于 \x0d 和 \cM。</span><br><span class="line">\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。</span><br><span class="line">\S 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</span><br><span class="line">\t 匹配一个制表符。等价于 \x09 和 \cI。</span><br><span class="line">\v 匹配一个垂直制表符。等价于 \x0b 和 \cK。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="特殊字符-分组符"><a href="#特殊字符-分组符" class="headerlink" title="特殊字符|分组符([],(),{});"></a>特殊字符|分组符([],(),{});</h3><ul><li>所谓特殊字符，就是一些有特殊含义的字符，如上面说的 runoo<em>b 中的 *，简单的说就是表示任何字符串的意思。如果要查找字符串中的 * 符号，则需要对 * 进行转义，即在其前加一个 : runo\</em>ob 匹配 runo*ob。</li><li>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符\ 放在它们前面。下表列出了正则表达式中的特殊字符：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">字符 含义</span><br><span class="line">特别字符 描述</span><br><span class="line">$ 匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 &#39;\n&#39; 或 &#39;\r&#39;。要匹配 $ 字符本身，请使用 \$。</span><br><span class="line">( ) 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \)。</span><br><span class="line">* 匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。</span><br><span class="line">+ 匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。</span><br><span class="line">. 匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 \. 。</span><br><span class="line">[ 标记一个中括号表达式的开始。要匹配 [，请使用 \[。</span><br><span class="line">? 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?。</span><br><span class="line">\ 将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， &#39;n&#39; 匹配字符 &#39;n&#39;。&#39;\n&#39; 匹配换行符。序列 &#39;\\&#39; 匹配 &quot;\&quot;，而 &#39;\(&#39; 则匹配 &quot;(&quot;。</span><br><span class="line">^ 匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 \^。</span><br><span class="line">&#123; 标记限定符表达式的开始。要匹配 &#123;，请使用 \&#123;。</span><br><span class="line">| 指明两项之间的一个选择。要匹配 |，请使用 \|。</span><br></pre></td></tr></table></figure><h3 id="修饰符-i-g-m"><a href="#修饰符-i-g-m" class="headerlink" title="修饰符(i,g,m);"></a>修饰符(i,g,m);</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">字符 含义</span><br><span class="line">i 忽略大小写</span><br><span class="line">g 执行全局匹配</span><br><span class="line">m 执行多行匹配</span><br></pre></td></tr></table></figure><h3 id="限定符-量词-n-m-n-n"><a href="#限定符-量词-n-m-n-n" class="headerlink" title="限定符|量词(*,?,+,-,{n,m},?=n,?!=n);"></a>限定符|量词(*,?,+,-,{n,m},?=n,?!=n);</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">字符 描述</span><br><span class="line">* 匹配前面的子表达式零次或多次。例如，zo* 能匹配 &quot;z&quot; 以及 &quot;zoo&quot;。* 等价于&#123;0,&#125;。</span><br><span class="line">+ 匹配前面的子表达式一次或多次。例如，&#39;zo+&#39; 能匹配 &quot;zo&quot; 以及 &quot;zoo&quot;，但不能匹配 &quot;z&quot;。+ 等价于 &#123;1,&#125;。</span><br><span class="line">? 匹配前面的子表达式零次或一次。例如，&quot;do(es)?&quot; 可以匹配 &quot;do&quot; 、 &quot;does&quot; 中的 &quot;does&quot; 、 &quot;doxy&quot; 中的 &quot;do&quot; 。? 等价于 &#123;0,1&#125;。</span><br><span class="line">&#123;n&#125; n 是一个非负整数。匹配确定的 n 次。例如，&#39;o&#123;2&#125;&#39; 不能匹配 &quot;Bob&quot; 中的 &#39;o&#39;，但是能匹配 &quot;food&quot; 中的两个 o。</span><br><span class="line">&#123;n,&#125; n 是一个非负整数。至少匹配n 次。例如，&#39;o&#123;2,&#125;&#39; 不能匹配 &quot;Bob&quot; 中的 &#39;o&#39;，但能匹配 &quot;foooood&quot; 中的所有 o。&#39;o&#123;1,&#125;&#39; 等价于 &#39;o+&#39;。&#39;o&#123;0,&#125;&#39; 则等价于 &#39;o*&#39;。</span><br><span class="line">&#123;n,m&#125; m 和 n 均为非负整数，其中n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，&quot;o&#123;1,3&#125;&quot; 将匹配 &quot;fooooood&quot; 中的前三个 o。&#39;o&#123;0,1&#125;&#39; 等价于 &#39;o?&#39;。请注意在逗号和两个数之间不能有空格。</span><br></pre></td></tr></table></figure><h2 id="test、exec、match的区别及用法"><a href="#test、exec、match的区别及用法" class="headerlink" title="test、exec、match的区别及用法"></a>test、exec、match的区别及用法</h2><h3 id="test"><a href="#test" class="headerlink" title="test:"></a>test:</h3><ul><li>test 返回 Boolean，查找对应的字符串中是否存在模式。</li><li>rgExp.test(str)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> var str &#x3D; &quot;1a1b1c&quot;; </span><br><span class="line">var reg &#x3D; &#x2F;1a&#x2F;; </span><br><span class="line">alert(reg.test(str)); &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><h3 id="exec"><a href="#exec" class="headerlink" title="exec:"></a>exec:</h3><ul><li>exec 查找并返回当前的匹配结果，并以数组的形式返回。或者null</li><li>rgExp.exec(str)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> var str &#x3D; &quot;1a1a1c&quot;; </span><br><span class="line">var reg &#x3D; &#x2F;1a&#x2F; &#x2F;&#x2F; [&quot;1a&quot;, index: 0, input: &quot;1a1b1c&quot;, groups: undefined]</span><br><span class="line">alert(reg.exec(str)); &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><h3 id="match"><a href="#match" class="headerlink" title="match:"></a>match:</h3><ul><li>match 返回一个数组或者null</li><li>str.match(rgExp)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">!function MatchDemo()&#123;</span><br><span class="line">    &#x2F;&#x2F; 声明变量。</span><br><span class="line">    var r, re; </span><br><span class="line">    var s &#x3D; &quot;The rain in Spain falls mainly in the plain&quot;;</span><br><span class="line">    &#x2F;&#x2F; 创建正则表达式模式。</span><br><span class="line">    re &#x3D; &#x2F;(a)in&#x2F;ig; </span><br><span class="line">    &#x2F;&#x2F; 尝试去匹配搜索字符串。</span><br><span class="line">    r &#x3D; s.match(re); &#x2F;&#x2F; [&quot;ain&quot;, &quot;ain&quot;, &quot;ain&quot;, &quot;ain&quot;]</span><br><span class="line">    </span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><ul><li>返回匹配到的位置的索引(第一个)，失败返回-1</li><li>str.match(rgExp)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str&#x3D;&quot;Visit W3School!&quot;</span><br><span class="line">document.write(str.search(&#x2F;w3school&#x2F;i)) &#x2F;&#x2F; 6</span><br></pre></td></tr></table></figure><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><ul><li>将分割后的子字符串春村到数组的string方法</li><li>str.split(rgExp,howmany) howmany,返回的数组的最大长度</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var str&#x3D;&quot;How are you doing today?&quot;</span><br><span class="line"></span><br><span class="line">str.split(&quot; &quot;)  &#x2F;&#x2F; How,are,you,doing,today?</span><br><span class="line">str.split(&quot;&quot;) &#x2F;&#x2F; H,o,w, ,a,r,e, ,y,o,u, ,d,o,i,n,g, ,t,o,d,a,y,?</span><br><span class="line">str.split(&quot; &quot;,3)&#x2F;&#x2F; How,are,you</span><br></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><ul><li>用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</li><li>str.replace(rgExp/substr, replacement) replacement：必需。替换文本或生成替换文本的函数。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name &#x3D; &#39;aaa bbb ccc&#39;;</span><br><span class="line">uw&#x3D;name.replace(&#x2F;\b\w+\b&#x2F;g, function(word)&#123;</span><br><span class="line">  return word.substring(0,1).toUpperCase()+word.substring(1);&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="校验数字的js正则表达式"><a href="#校验数字的js正则表达式" class="headerlink" title="校验数字的js正则表达式"></a>校验数字的js正则表达式</h3><p> 1 数字：^[0-9]*$</p><p> 2 n位的数字：^\d{n}$</p><p> 3 至少n位的数字：^\d{n,}$</p><p> 4 m-n位的数字：^\d{m,n}$</p><p> 5 零和非零开头的数字：^(0|[1-9][0-9]*)$</p><p> 6 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$</p><p> 7 带1-2位小数的正数或负数：^(-)?\d+(.\d{1,2})?$</p><p> 8 正数、负数、和小数：^(-|+)?\d+(.\d+)?$</p><p> 9 有两位小数的正实数：^[0-9]+(.[0-9]{2})?$</p><p>10 有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$</p><p>11 非零的正整数：^[1-9]\d<em>$ 或 ^([1-9][0-9]</em>){1,3}$ 或 ^+?[1-9][0-9]*$</p><p>12 非零的负整数：^-[1-9][]0-9”<em>$ 或 ^-[1-9]\d</em>$</p><p>13 非负整数：^\d+$ 或 ^[1-9]\d*|0$</p><p>14 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</p><p>15 非负浮点数：^\d+(.\d+)?$ 或 ^[1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>|0?.0+|0$</p><p>16 非正浮点数：^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>))|0?.0+|0$</p><p>17 正浮点数：^[1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>$ 或 ^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]*.[0-9]+)|([0-9]</em>[1-9][0-9]*))$</p><p>18 负浮点数：^-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>)$ 或 ^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]*.[0-9]+)|([0-9]</em>[1-9][0-9]*)))$</p><p>19 浮点数：^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>|0?.0+|0)$</p><h3 id="校验字符的js正则表达式"><a href="#校验字符的js正则表达式" class="headerlink" title="校验字符的js正则表达式"></a>校验字符的js正则表达式</h3><p> 1 汉字：^[\u4e00-\u9fa5]{0,}$</p><p> 2 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</p><p> 3 长度为3-20的所有字符：^.{3,20}$</p><p> 4 由26个英文字母组成的字符串：^[A-Za-z]+$</p><p> 5 由26个大写英文字母组成的字符串：^[A-Z]+$</p><p> 6 由26个小写英文字母组成的字符串：^[a-z]+$</p><p> 7 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</p><p> 8 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$</p><p> 9 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</p><p>10 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</p><p>11 可以输入含有^%&amp;’,;=?$&quot;等字符：[^%&amp;’,;=?$\x22]+</p><p>12 禁止输入含有<del>的字符：[^</del>\x22]+</p><h3 id="特殊需求js正则表达式"><a href="#特殊需求js正则表达式" class="headerlink" title="特殊需求js正则表达式"></a>特殊需求js正则表达式</h3><p> 1 Email邮箱地址：^\w+([-+.]\w+)<em>@\w+([-.]\w+)*.\w+([-.]\w+)</em>$  另外一个：  /^[A-Za-z0-9._%-]+@([A-Za-z0-9-]+.)+[A-Za-z]{2,4}$/</p><p> 2 url域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</p><p> 3 InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$</p><p> 4 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$  另外一个：/^1[3|4|5|7|8]\d{9}$/</p><p> 5 电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<br>       ^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$ </p><p> 6 国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}     //懒人建站<a href="http://www.51xuediannao.com/" target="_blank" rel="noopener">http://www.51xuediannao.com/</a></p><p> 7 身份证号：</p><p>15或18位身份证：^\d{15}|\d{18}$</p><p>15位身份证：^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$</p><p>18位身份证：^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{4}$</p><p> 8 短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</p><p> 9 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</p><p>10 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$</p><p>10.1 6位数数字密码强匹配^\d{6}$</p><p>11 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z]).{8,10}$  </p><p>12 日期格式：^\d{4}-\d{1,2}-\d{1,2}</p><p>13 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</p><p>14 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ </p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数截流防抖的原理和应用场景</title>
      <link href="/2019/12/28/%E6%88%AA%E6%B5%81%E9%98%B2%E6%8A%96%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
      <url>/2019/12/28/%E6%88%AA%E6%B5%81%E9%98%B2%E6%8A%96%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="函数节流与函数防抖"><a href="#函数节流与函数防抖" class="headerlink" title="函数节流与函数防抖"></a>函数节流与函数防抖</h1><h2 id="函数防抖（debounce）"><a href="#函数防抖（debounce）" class="headerlink" title="函数防抖（debounce）"></a>函数防抖（debounce）</h2><ul><li>当调用动作过n毫秒后，才会执行该动作，若在这n毫秒内又调用此动作则将重新计算执行时间,是函数在特定的时间内不被再调用后执行。</li></ul><p>防抖debounce代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 防抖</span><br><span class="line">function debounce(fn, wait) &#123;    </span><br><span class="line">    var timeout &#x3D; null;    </span><br><span class="line">    return function() &#123;        </span><br><span class="line">        if(timeout !&#x3D;&#x3D; null)   clearTimeout(timeout);        </span><br><span class="line">        timeout &#x3D; setTimeout(fn, wait);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 处理函数</span><br><span class="line">function handle() &#123;    </span><br><span class="line">    console.log(Math.random()); </span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 滚动事件</span><br><span class="line">window.addEventListener(&#39;scroll&#39;, debounce(handle, 1000));</span><br></pre></td></tr></table></figure><h2 id="函数节流（throttle）"><a href="#函数节流（throttle）" class="headerlink" title="函数节流（throttle）"></a>函数节流（throttle）</h2><ul><li>预先设定一个执行周期，当调用动作的时刻大于等于执行周期则执行该动作，然后进入下一个新周期,是确保函数特定的时间内至多执行一次。<blockquote><p>函数节流（throttle）与 函数防抖（debounce）都是为了限制函数的执行频次，以优化函数触发频率过高导致的响应速度跟不上触发频率，出现延迟，假死或卡顿的现象。</p></blockquote></li></ul><p>函数节流主要有两种实现方法：时间戳和定时器。接下来分别用两种方法实现throttle~</p><p>节流throttle代码（时间戳）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var throttle &#x3D; function(func, delay) &#123;            </span><br><span class="line">　　var prev &#x3D; Date.now();            </span><br><span class="line">　　return function() &#123;                </span><br><span class="line">　　　　var context &#x3D; this;                </span><br><span class="line">　　　　var args &#x3D; arguments;                </span><br><span class="line">　　　　var now &#x3D; Date.now();                </span><br><span class="line">　　　　if (now - prev &gt;&#x3D; delay) &#123;                    </span><br><span class="line">　　　　　　func.apply(context, args);                    </span><br><span class="line">　　　　　　prev &#x3D; Date.now();                </span><br><span class="line">　　　　&#125;            </span><br><span class="line">　　&#125;        </span><br><span class="line">&#125;        </span><br><span class="line">function handle() &#123;            </span><br><span class="line">　　console.log(Math.random());        </span><br><span class="line">&#125;        </span><br><span class="line">window.addEventListener(&#39;scroll&#39;, throttle(handle, 1000));</span><br></pre></td></tr></table></figure><p>节流throttle代码（定时器）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 节流throttle代码（定时器）：</span><br><span class="line">var throttle &#x3D; function(func, delay) &#123;            </span><br><span class="line">    var timer &#x3D; null;            </span><br><span class="line">    return function() &#123;                </span><br><span class="line">        var context &#x3D; this;               </span><br><span class="line">        var args &#x3D; arguments;                </span><br><span class="line">        if (!timer) &#123;                    </span><br><span class="line">            timer &#x3D; setTimeout(function() &#123;                        </span><br><span class="line">                func.apply(context, args);                        </span><br><span class="line">                timer &#x3D; null;                    </span><br><span class="line">            &#125;, delay);                </span><br><span class="line">        &#125;            </span><br><span class="line">    &#125;        </span><br><span class="line">&#125;        </span><br><span class="line">function handle() &#123;            </span><br><span class="line">    console.log(Math.random());        </span><br><span class="line">&#125;        </span><br><span class="line">window.addEventListener(&#39;scroll&#39;, throttle(handle, 1000));</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li>window对象的resize、scroll事件</li><li>拖拽时的mousemove事件</li><li>文字输入、自动完成的keyup事件</li></ul><a id="more"></a><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li><p>可以拿我们平时坐电梯为例来形象地表述二者的区别</p></li><li><p>函数防抖：如果有人进电梯（触发事件），那电梯将在10秒钟后出发（执行事件监听器），这时如果又有人进电梯了（在10秒内再次触发该事件），我们又得等10秒再出发（重新计时）。</p></li><li><p>函数节流 ：保证如果电梯第一个人进来后，10秒后准时运送一次，这个时间从第一个人上电梯开始计时，不等待，如果没有人，则不运行</p></li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h3><ul><li>移动鼠标函数防抖，滑动滚动条实现函数截流</li></ul><p><a href="https://guofes.github.io/learn/js/coordinate_size">test</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数据类型和变量</title>
      <link href="/2019/12/28/s%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8F%98%E9%87%8F/"/>
      <url>/2019/12/28/s%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="js数据类型"><a href="#js数据类型" class="headerlink" title="js数据类型"></a>js数据类型</h1><ul><li>undefined</li><li>null</li><li>string</li><li>boolean </li><li>number</li><li>symbol(ES6)</li><li>Object</li></ul><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h5 id="1：数字（number）"><a href="#1：数字（number）" class="headerlink" title="1：数字（number）"></a>1：数字（number）</h5><ul><li>包括了浮点数和整数；<blockquote><p>大多数语言在计算浮点数时都会出现计算不精确的问题，这是由于计算机在计算的时候会将数组转换成二进制数，因为二进制表示太长了，计算机会截取一定的位数来进行计算，所以在计算浮点数时会出现一些不精确的问题，但是，这种现象在js中尤为严重解决方式一般是先将浮点数转换成整数（乘以固定的十的倍数，之后再结果上除去），在网上有很多封装好的函数来进行这个动作</p></blockquote></li></ul><a id="more"></a><ul><li>八进制：以数字0开始表明该数字的八进制；</li><li>十六进制：以0x或者0X为前缀，表示数字为十六进制；</li><li>特殊值：Infinity无穷大和NaN(0/0)非数字（但是是数字类型）</li><li>Infinity和-Infinity：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过isFinite（）判断是否有限大，如果是Infinity，返回false；这里Infinity可以作为参数赋值给变量（比较大小的问题）</span><br></pre></td></tr></table></figure><ul><li>NaN：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">代表非数字的特殊数值，该属性用于指示某个值不是数字；</span><br><span class="line"></span><br><span class="line">NaN的两个特点：（NaN &#x3D;&#x3D; not a number）</span><br><span class="line"></span><br><span class="line">1：任何涉及NaN的操作都会返回NaN；</span><br><span class="line"></span><br><span class="line">2：NaN与任何数值都不相等，包括他自身；</span><br><span class="line"></span><br><span class="line">不能与Number.NaN比较来检测一个值是不是数字，而只能调用isNaN()来比较；</span><br><span class="line"></span><br><span class="line">isNaN（）（可以用来判断一个输入的值是不是数字）函数如果x是特殊的非数字NaN（或者能被转换为这样的值），返回的值就是true，如果x是其他值，则返回false。</span><br></pre></td></tr></table></figure><h5 id="2：字符串（string）："><a href="#2：字符串（string）：" class="headerlink" title="2：字符串（string）："></a>2：字符串（string）：</h5><ul><li>多个字符的有序序列；双引号和单引号引起来的都是字符串；</li></ul><h5 id="3：布尔值（boolean）：true-false；"><a href="#3：布尔值（boolean）：true-false；" class="headerlink" title="3：布尔值（boolean）：true / false；"></a>3：布尔值（boolean）：true / false；</h5><h5 id="4：undefind"><a href="#4：undefind" class="headerlink" title="4：undefind"></a>4：undefind</h5><ul><li>如果使用一个未定义的变量，或者是没有初始值的变量，都会得到undefind，<blockquote><p>undefined == null(true); undefined === null(false)</p></blockquote></li></ul><h5 id="5：null"><a href="#5：null" class="headerlink" title="5：null"></a>5：null</h5><p>*只有一个值null，如果变量的值是null，那么这个变量存在但是为空；<br>null表示尚未存在的对象，但是函数或方法返回的是对象，找不到该对象时，返回的是null</p><h5 id="6-symbol-ES6"><a href="#6-symbol-ES6" class="headerlink" title="6: symbol(ES6)"></a>6: symbol(ES6)</h5><ul><li>ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型</li><li>Symbol 值通过Symbol函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let s &#x3D; Symbol();</span><br><span class="line"></span><br><span class="line">typeof s</span><br><span class="line">&#x2F;&#x2F; &quot;symbol&quot;</span><br></pre></td></tr></table></figure><h2 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h2><h5 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h5><ul><li>属性和方法的集合</li></ul><h2 id="JS数据类型的判断"><a href="#JS数据类型的判断" class="headerlink" title="JS数据类型的判断"></a>JS数据类型的判断</h2><h4 id="1、typeof"><a href="#1、typeof" class="headerlink" title="1、typeof"></a>1、typeof</h4><ul><li>返回一个表示数据类型的字符串，返回结果包括：number、boolean、string、symbol、object、undefined、function等7种数据类型，但不能判断null、array等</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">typeof Symbol(); &#x2F;&#x2F; symbol 有效</span><br><span class="line">typeof &#39;&#39;; &#x2F;&#x2F; string 有效</span><br><span class="line">typeof 1; &#x2F;&#x2F; number 有效</span><br><span class="line">typeof true; &#x2F;&#x2F;boolean 有效</span><br><span class="line">typeof undefined; &#x2F;&#x2F;undefined 有效</span><br><span class="line">typeof new Function(); &#x2F;&#x2F; function 有效</span><br><span class="line">typeof null; &#x2F;&#x2F;object 无效</span><br><span class="line">typeof [] ; &#x2F;&#x2F;object 无效</span><br><span class="line">typeof new Date(); &#x2F;&#x2F;object 无效</span><br><span class="line">typeof new RegExp(); &#x2F;&#x2F;object 无效</span><br></pre></td></tr></table></figure><h4 id="2、instanceof"><a href="#2、instanceof" class="headerlink" title="2、instanceof"></a>2、instanceof</h4><ul><li>用来判断A是否为B的实例，A instanceof B， 返回 boolean 值。instanceof 用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性，但它不能检测 null 和 undefined</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[] instanceof Array; &#x2F;&#x2F;true</span><br><span class="line">&#123;&#125; instanceof Object;&#x2F;&#x2F;true</span><br><span class="line">new Date() instanceof Date;&#x2F;&#x2F;true</span><br><span class="line">new RegExp() instanceof RegExp&#x2F;&#x2F;true</span><br><span class="line">null instanceof Null&#x2F;&#x2F;报错</span><br><span class="line">undefined instanceof undefined&#x2F;&#x2F;报错</span><br></pre></td></tr></table></figure><h4 id="3、Object-prototype-toString-call"><a href="#3、Object-prototype-toString-call" class="headerlink" title="3、Object.prototype.toString.call()"></a>3、Object.prototype.toString.call()</h4><ul><li>一般数据类型都能够判断，最准确最常用的一种</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Object.prototype.toString.call(&#39;&#39;) ;   &#x2F;&#x2F; [object String]</span><br><span class="line">Object.prototype.toString.call(1) ;    &#x2F;&#x2F; [object Number]</span><br><span class="line">Object.prototype.toString.call(true) ; &#x2F;&#x2F; [object Boolean]</span><br><span class="line">Object.prototype.toString.call(undefined) ; &#x2F;&#x2F; [object Undefined]</span><br><span class="line">Object.prototype.toString.call(null) ; &#x2F;&#x2F; [object Null]</span><br><span class="line">Object.prototype.toString.call(new Function()) ; &#x2F;&#x2F; [object Function]</span><br><span class="line">Object.prototype.toString.call(new Date()) ; &#x2F;&#x2F; [object Date]</span><br><span class="line">Object.prototype.toString.call([]) ; &#x2F;&#x2F; [object Array]</span><br><span class="line">Object.prototype.toString.call(new RegExp()) ; &#x2F;&#x2F; [object RegExp]</span><br><span class="line">Object.prototype.toString.call(new Error()) ; &#x2F;&#x2F; [object Error]</span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><ul><li>1、遵循原则：先声明，后使用</li><li>2、预解析机制（变量提升）：对紧跟在关键字（如var，function）后面的变量名称进行声明提前（把声明部分提前，赋值部分保留在原位置）。遇到关键字就有声明提前。<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2></li><li>1、全局作用域—全局变量：(ES5中)三种声明方式</li><li>2、作用域链的最顶层是window<blockquote><p>A．var 变量;</p><blockquote><p>B．变量;</p><blockquote><p>C．windw.变量（原理：对象.属性）</p></blockquote></blockquote></blockquote></li></ul><p>区别:加var的变量，不能被delete删除，不加var的变量会被delete删除。</p><h2 id="函数作用域—局部变量"><a href="#函数作用域—局部变量" class="headerlink" title="函数作用域—局部变量:"></a>函数作用域—局部变量:</h2><ul><li>只有变量在函数内声明时，它才是局部变量</li><li>特例：不加var的变量在函数内声明，则是全局变量</li><li>加了var的变量在函数内声明，才是局部变量</li></ul><h2 id="变量的定义没有块级作用域-es5"><a href="#变量的定义没有块级作用域-es5" class="headerlink" title="变量的定义没有块级作用域(es5)"></a>变量的定义没有块级作用域(es5)</h2><ul><li>（如：if，while等块中，即非函数的块），故里面声明的变量还是全局变量</li></ul><h2 id="块级作用域-es6"><a href="#块级作用域-es6" class="headerlink" title="块级作用域(es6)"></a>块级作用域(es6)</h2><ul><li>let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。</li><li>const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。对象是引用类型（const定义的对象引用能被修改）</li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css性能提升</title>
      <link href="/2019/12/25/ss%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87/"/>
      <url>/2019/12/25/ss%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87/</url>
      
        <content type="html"><![CDATA[<h2 id="内联首屏关键CSS（Critical-CSS）"><a href="#内联首屏关键CSS（Critical-CSS）" class="headerlink" title="内联首屏关键CSS（Critical CSS）"></a>内联首屏关键CSS（Critical CSS）</h2><ul><li><p>首次有效绘制（First Meaningful Paint，简称FMP）即指页面的首要内容（primary content）出现在屏幕上的时间。这一指标影响用户看到页面前所需等待的时间，而<strong>内联首屏关键CSS（即Critical CSS，可以称之为首屏关键CSS）</strong>能减少这一时间。</p></li><li><p>将CSS直接内联到HTML文档中能使CSS更快速地下载。而使用外部CSS文件时，需要在HTML文档下载完成后才知道所要引用的CSS文件，然后才下载它们。所以说，内联CSS能够使浏览器开始页面渲染的时间提前，因为在HTML下载完成之后就能渲染</p></li><li><p>既然内联CSS能够使页面渲染的开始时间提前，那么是否可以内联所有的CSS呢？答案显然是否定的，这种方式并不适用于内联较大的CSS文件。因为初始拥塞窗口3存在限制（TCP相关概念，通常是 14.6kB，压缩后大小），如果内联CSS后的文件超出了这一限制，系统就需要在服务器和浏览器之间进行更多次的往返，这样并不能提前页面渲染时间。因此，我们应当只将渲染首屏内容所需的关键CSS内联到HTML中。</p></li></ul><a id="more"></a><ul><li>既然已经知道内联首屏关键CSS能够优化性能了，那下一步就是如何确定首屏关键CSS了。显然，我们不需要手动确定哪些内容是首屏关键CSS。Github上有一个项目Critical CSS4，可以将属于首屏的关键样式提取出来，大家可以看一下该项目，结合自己的构建工具进行使用。当然为了保证正确，大家最好再亲自确认下提取出的内容是否有缺失。</li><li>不过内联CSS有一个缺点，内联之后的CSS不会进行缓存，每次都会重新下载。不过如上所说，如果我们将内联后的文件大小控制在了14.6kb以内，这似乎并不是什么大问题。</li></ul><h2 id="异步加载CSS"><a href="#异步加载CSS" class="headerlink" title="异步加载CSS"></a>异步加载CSS</h2><ul><li>CSS会阻塞渲染，在CSS文件请求、下载、解析完成之前，浏览器将不会渲染任何已处理的内容。有时，这种阻塞是必须的，因为我们并不希望在所需的CSS加载之前，浏览器就开始渲染页面。那么将首屏关键CSS内联后，剩余的CSS内容的阻塞渲染就不是必需的了，可以使用外部CSS，并且异步加载。<blockquote><p>四种方式</p></blockquote></li><li>使用JavaScript动态创建样式表link元素，并插入到DOM中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建link标签</span><br><span class="line">const myCSS &#x3D; document.createElement( &quot;link&quot; );</span><br><span class="line">myCSS.rel &#x3D; &quot;stylesheet&quot;;</span><br><span class="line">myCSS.href &#x3D; &quot;mystyles.css&quot;;</span><br><span class="line">&#x2F;&#x2F; 插入到header的最后位置</span><br><span class="line">document.head.insertBefore( myCSS, document.head.childNodes[ document.head.childNodes.length - 1 ].nextSibling );</span><br></pre></td></tr></table></figure><ul><li>将link元素的media属性设置为用户浏览器不匹配的媒体类型（或媒体查询），如media=”print”，甚至可以是完全不存在的类型media=”noexist”,在文件加载完成之后，将media的值设为screen或all，从而让浏览器开始解析CSS。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;mystyles.css&quot; media&#x3D;&quot;noexist&quot; onload&#x3D;&quot;this.media&#x3D;&#39;all&#39;&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>通过rel属性将link元素标记为alternate可选样式表，也能实现浏览器异步加载。同样别忘了加载完成之后，将rel改回去。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;alternate stylesheet&quot; href&#x3D;&quot;mystyles.css&quot; onload&#x3D;&quot;this.rel&#x3D;&#39;stylesheet&#39;&quot;&gt;</span><br></pre></td></tr></table></figure><p>上述的三种方法都较为古老。现在，rel=”preload”5这一Web标准指出了如何异步加载资源，包括CSS类资源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;preload&quot; href&#x3D;&quot;mystyles.css&quot; as&#x3D;&quot;style&quot; onload&#x3D;&quot;this.rel&#x3D;&#39;stylesheet&#39;&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h2><ul><li>文件的大小会直接影响浏览器的加载速度，这一点在网络较差时表现地尤为明显。相信大家都早已习惯对CSS进行压缩，现在的构建工具，如webpack、gulp/grunt、rollup等也都支持CSS压缩功能。压缩后的文件能够明显减小，可以大大降低了浏览器的加载时间。</li></ul><h2 id="去除无用CSS"><a href="#去除无用CSS" class="headerlink" title="去除无用CSS"></a>去除无用CSS</h2><ul><li>手动删除这些无用CSS是很低效的。我们可以借助Uncss7库来进行。Uncss可以用来移除样式表中的无用CSS，并且支持多文件和JavaScript注入的CSS。</li></ul><h2 id="有选择地使用选择器"><a href="#有选择地使用选择器" class="headerlink" title="有选择地使用选择器"></a>有选择地使用选择器</h2><p>CSS选择器的匹配是从右向左进行的，这一策略导致了不同种类的选择器之间的性能也存在差异</p><ul><li>保持简单，不要使用嵌套过多过于复杂的选择器。</li><li>通配符和属性选择器效率最低，需要匹配的元素最多，尽量避免使用。</li><li>不要使用类选择器和ID选择器修饰元素标签，如h3#markdown-content，这样多此一举，还会降低效率。</li><li>不要为了追求速度而放弃可读性与可维护性。</li></ul><h2 id="减少使用昂贵的属性"><a href="#减少使用昂贵的属性" class="headerlink" title="减少使用昂贵的属性"></a>减少使用昂贵的属性</h2><ul><li>在浏览器绘制屏幕时，所有需要浏览器进行操作或计算的属性相对而言都需要花费更大的代价。当页面发生重绘时，它们会降低浏览器的渲染性能。所以在编写CSS时，我们应该尽量减少使用昂贵属性，如box-shadow/border-radius/filter/透明度/:nth-child等。</li></ul><h2 id="优化重排与重绘"><a href="#优化重排与重绘" class="headerlink" title="优化重排与重绘"></a>优化重排与重绘</h2><h3 id="减少重排"><a href="#减少重排" class="headerlink" title="减少重排"></a>减少重排</h3><p> 重排会导致浏览器重新计算整个文档，重新构建渲染树，这一过程会降低浏览器的渲染速度,一下操作会是页面重排</p><ul><li>改变font-size和font-family</li><li>改变元素的内外边距</li><li>通过JS改变CSS类</li><li>通过JS获取DOM元素的位置相关属性（如width/height/left等）</li><li>CSS伪类激活</li><li>滚动滚动条或者改变窗口大小</li></ul><h3 id="避免不必要的重绘"><a href="#避免不必要的重绘" class="headerlink" title="避免不必要的重绘"></a>避免不必要的重绘</h3><ul><li>当元素的外观（如color，background，visibility等属性）发生改变时，会触发重绘。在网站的使用过程中，重绘是无法避免的。浏览器对此做了优化，它会将多次的重排、重绘操作合并为一次执行。不过我们仍需要避免不必要的重绘，如页面滚动时触发的hover事件，可以在滚动的时候禁用hover事件，这样页面在滚动时会更加流畅。</li></ul><h2 id="不要使用-import"><a href="#不要使用-import" class="headerlink" title="不要使用@import"></a>不要使用@import</h2><ul><li>使用@import引入CSS会影响浏览器的并行下载</li><li>多个@import会导致下载顺序紊乱。在IE中，@import会引发资源文件的下载顺序被打乱，即排列在@import后面的js文件先于@import下载，并且打乱甚至破坏@import自身的并行下载。</li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器坐标，尺寸和移动端的适配</title>
      <link href="/2019/12/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9D%90%E6%A0%87%EF%BC%8C%E5%B0%BA%E5%AF%B8%E5%92%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E9%80%82%E9%85%8D/"/>
      <url>/2019/12/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9D%90%E6%A0%87%EF%BC%8C%E5%B0%BA%E5%AF%B8%E5%92%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E9%80%82%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="浏览器坐标系"><a href="#浏览器坐标系" class="headerlink" title="浏览器坐标系"></a>浏览器坐标系</h1><h2 id="一、各种坐标系（坐标原点）"><a href="#一、各种坐标系（坐标原点）" class="headerlink" title="一、各种坐标系（坐标原点）"></a>一、各种坐标系（坐标原点）</h2><ul><li>1)、可视区域（浏览器窗口中可以看到（网页）的区域）左上角</li><li>2)、页面左上角</li><li>3)、某个HTML元素的左上角</li></ul><h3 id="1）以可视区域左上角为坐标系原点"><a href="#1）以可视区域左上角为坐标系原点" class="headerlink" title="1）以可视区域左上角为坐标系原点"></a>1）以可视区域左上角为坐标系原点</h3><ul><li>event.clientX: 鼠标距离原点的x方向的坐标 </li><li>event.clientY: 鼠标距离原点的y方向的坐标</li></ul><h3 id="2）、以页面左上角为坐标系原点"><a href="#2）、以页面左上角为坐标系原点" class="headerlink" title="2）、以页面左上角为坐标系原点"></a>2）、以页面左上角为坐标系原点</h3><ul><li>event.pageX:鼠标距离原点的x方向的坐标 = event.clientX + scrollTop</li><li>event.pageY:鼠标距离原点的Y方向的坐标 = event.clientY + scrollLeft</li></ul><h3 id="3）以某个元素的左上角为坐标系原点"><a href="#3）以某个元素的左上角为坐标系原点" class="headerlink" title="3）以某个元素的左上角为坐标系原点"></a>3）以某个元素的左上角为坐标系原点</h3><ul><li>event.offsetX:鼠标距离事件源的x方向的坐标</li><li>event.offsetY:鼠标距离事件源的y方向的坐标</li></ul><a id="more"></a><h3 id="4）定位元素（style属性的left和top）"><a href="#4）定位元素（style属性的left和top）" class="headerlink" title="4）定位元素（style属性的left和top）"></a>4）定位元素（style属性的left和top）</h3><ul><li>left和top的坐标系原点是谁？（前提元素有定位（position属性））基于父元素（离该元素最近的有定位的父元素）</li><li>1）、父元素是relative，当前元素是absolute;当前元素left和top的基准是最近的有relative的父元素。</li><li>2）、当前元素是relative；当前元素的left和top的基准是当前元素原始的位置</li><li>3）、当前元素是fixed；当前元素的left和top的基准是可视区域。</li></ul><h3 id="5）offsetLeft和offsetTop："><a href="#5）offsetLeft和offsetTop：" class="headerlink" title="5）offsetLeft和offsetTop："></a>5）offsetLeft和offsetTop：</h3><ul><li>A、当某个元素的父级元素没有定位，offsetLeft和offsetTop表示距离页面的坐标（既就是left和top）也就是说，父级元素没有定位时，就是按照页面定位的。</li><li>B、当某个元素的父级有定位，则offsetLeft和offsetTop表示距离有定位最近的父元素的坐标。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">网页可见区域宽： document.body.clientWidth</span><br><span class="line">网页可见区域高： document.body.clientHeight</span><br><span class="line">网页可见区域宽： document.body.offsetWidth (包括边线的宽)</span><br><span class="line">网页可见区域高： document.body.offsetHeight (包括边线的高)</span><br><span class="line">网页正文全文宽： document.body.scrollWidth</span><br><span class="line">网页正文全文高： document.body.scrollHeight</span><br><span class="line">网页被卷去的高： document.body.scrollTop</span><br><span class="line">网页被卷去的左： document.body.scrollLeft</span><br><span class="line">网页正文部分上： window.screenTop</span><br><span class="line">网页正文部分左： window.screenLeft</span><br><span class="line">屏幕分辨率的高： window.screen.height</span><br><span class="line">屏幕分辨率的宽： window.screen.width</span><br><span class="line">屏幕可用工作区高度： window.screen.availHeight</span><br><span class="line">屏幕可用工作区宽度： window.screen.availWidth</span><br><span class="line">窗口的文档显示区的高度: window.innerWidth</span><br><span class="line">窗口的文档显示区的宽度: window.innerHeight</span><br></pre></td></tr></table></figure><h1 id="CSS尺寸单位"><a href="#CSS尺寸单位" class="headerlink" title="CSS尺寸单位"></a>CSS尺寸单位</h1><h3 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h3><ul><li>指基本原色素及其灰度的基本编码。css中的像素只是一个抽象的单位，在不同的设备或不同的环境中，css中的1px所代表的设备物理像素是不同的。</li></ul><h3 id="物理像素"><a href="#物理像素" class="headerlink" title="物理像素"></a>物理像素</h3><ul><li>它是显示器（电脑、手机屏幕）最小的物理显示单位，物理像素指的是显示器上最小的点。物理像素的大小取决于屏幕。是一个无法改变的属性。</li></ul><h3 id="设备独立像素"><a href="#设备独立像素" class="headerlink" title="设备独立像素"></a>设备独立像素</h3><ul><li>开发过程中使用的css中的px</li></ul><h3 id="设备像素比（device-pixel-radio）"><a href="#设备像素比（device-pixel-radio）" class="headerlink" title="设备像素比（device pixel radio）"></a>设备像素比（device pixel radio）</h3><p>设备像素比 = 物理像素 / 设备独立像素，单位是dpr！（device pixel radio）</p><h3 id="Retina屏幕"><a href="#Retina屏幕" class="headerlink" title="Retina屏幕"></a>Retina屏幕</h3><ul><li>所谓“Retina”是一种显示标准，是把更多的像素点压缩至一块屏幕里，从而达到更高的分辨率并提高屏幕显示的细腻程度。也被称为视网膜显示屏 ——百度百科</li><li>因为Retina屏幕的出现，在pc端默认情况下，css中的1px等于1物理像素，但在移动端1px不一定等于1物理像素，比如说iPhone的设备独立像素是375和667,因为它使用了Retina屏幕，他的dpr是2，所以iPhone 6 的物理像素为 750 *1334</li><li>在不同的屏幕上(普通屏幕 vs retina屏幕)，css中1px所呈现的大小(物理尺寸)是一致的，不同的是1px所对应的物理像素个数是不一致的。在普通屏幕下，1px 对应 1个物理像素(1:1)。 在Retina屏幕下（dpr=2），1px对应 2x2个物理像素(1:4)。</li><li>像素</li></ul><h3 id="浏览器缩放"><a href="#浏览器缩放" class="headerlink" title="浏览器缩放"></a>浏览器缩放</h3><p>缩放是缩放CSS像素(缩放比例为1时,一个CSS像素等于一个屏幕像素)，就是在屏幕分辨率不变的情况下，用户对浏览进行了缩放</p><ul><li>强调一点，用户的缩放行为是对浏览器进行的，缩放的是css像素，而非分辨率，分辨率是屏幕的分辨率，不论你怎么缩放当前页面，屏幕分辨率都不会改变<blockquote><p>&lt; meta name=”viewport” content=”width=device-width,initial-scale=1.0”&gt; //禁止浏览器缩放</p></blockquote></li></ul><h3 id="em"><a href="#em" class="headerlink" title="em"></a>em</h3><ul><li>em的值并不是固定的；</li><li>em会继承父级元素的字体大小；</li><li>任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。body选择器中声明Font-size=62.5%&lt;==&gt;1em=10px。<blockquote><p>em 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。</p></blockquote></li></ul><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><ul><li>rem 是CSS3的一个相对单位（root em，根em）</li><li>使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素</li><li>只要html的font-size大小不变，1rem所代表的font-size大小就不会变，rem只取决于html的font-size</li></ul><h3 id="视口单位-Viewport-units"><a href="#视口单位-Viewport-units" class="headerlink" title="视口单位(Viewport units)"></a>视口单位(Viewport units)</h3><ul><li><p>在PC端，视口指的是在PC端，指的是浏览器的可视区域；</p></li><li><p>而在移动端，它涉及3个视口：Layout Viewport（布局视口），Visual Viewport（视觉视口），Ideal Viewport（理想视口）。</p></li><li><p>视口单位中的“视口”，PC端指的是浏览器的可视区域；移动端指的就是Viewport中的Layout Viewport。</p></li><li><p>根据CSS3规范，视口单位主要包括以下4个：</p><blockquote><p>兼容性问题(在移动端 iOS 8 以上以及 Android 4.4 以上获得支持，并且在微信 x5 内核中也得到完美的全面支持)</p></blockquote><pre><code>1.vw：1vw等于视口宽度的1%。2.vh：1vh等于视口高度的1%。3.vmin：选取vw和vh中最小的那个。4.vmax：选取vw和vh中最大的那个。</code></pre></li></ul><h1 id="移动端的适配"><a href="#移动端的适配" class="headerlink" title="移动端的适配"></a>移动端的适配</h1><h3 id="rem方案"><a href="#rem方案" class="headerlink" title="rem方案"></a>rem方案</h3><ul><li>原理<blockquote><p>rem是相对长度单位，rem方案中的样式设计为相对于根元素font-size计算值的倍数。根据 屏幕宽度 设置html标签的font-size，在布局时使用 rem 单位布局，达到自适应的目的，是 弹性布局 的一种实现方式。</p></blockquote></li><li>实现过程： <blockquote><p>首先获取文档根元素和设备dpr，设置 rem，在html文档加载和解析完成后调整body字体大小； 在页面缩放 / 回退 / 前进的时候， 获取元素的内部宽度 (不包括垂直滚动条，边框和外边距)，重新调整 rem 大小。</p></blockquote></li><li>实现方法：<blockquote><p>用 css 处理器或 npm 包将页面 css 样式中的px自动转换成 rem。在整个 flexible 适配方案中，文本使用px作为单位，使用[data-dpr]属性来区分不同dpr下的文本字号。由于手机浏览器对字体显示最小是8px，因此对于小尺寸文字需要采用px为单位，防止通过 rem 转化后出现显示问题。手机淘宝 中的字体使用px为单位，腾讯新闻中的字体使用rem为单位。</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">(function(win, lib) &#123;</span><br><span class="line">    var doc &#x3D; win.document; &#x2F;&#x2F;当前文档对象</span><br><span class="line">    var docEl &#x3D; doc.documentElement; &#x2F;&#x2F;文档对象根元素的只读属性</span><br><span class="line">    var metaEl &#x3D; doc.querySelector(&#39;meta[name&#x3D;&quot;viewport&quot;]&#39;);</span><br><span class="line">    var flexibleEl &#x3D; doc.querySelector(&#39;meta[name&#x3D;&quot;flexible&quot;]&#39;);</span><br><span class="line">    var dpr &#x3D; 0;</span><br><span class="line">    var scale &#x3D; 0;</span><br><span class="line">    var tid;</span><br><span class="line">    var flexible &#x3D; lib.flexible || (lib.flexible &#x3D; &#123;&#125;);</span><br><span class="line">    if (metaEl) &#123; </span><br><span class="line">    &#x2F;&#x2F;当meta中viewport的标签设置了scale时，将根据scale手动设置dpr</span><br><span class="line">        console.warn(&#39;将根据已有的meta标签来设置缩放比例&#39;);</span><br><span class="line">        var match &#x3D; metaEl.getAttribute(&#39;content&#39;).match(&#x2F;initial\-scale&#x3D;([\d\.]+)&#x2F;);</span><br><span class="line">        if (match) &#123;</span><br><span class="line">            scale &#x3D; parseFloat(match[1]);</span><br><span class="line">            dpr &#x3D; parseInt(1 &#x2F; scale);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (flexibleEl) &#123;   </span><br><span class="line">    &#x2F;&#x2F;当meta中flexible的标签存在时，据此设置dpr</span><br><span class="line">        var content &#x3D; flexibleEl.getAttribute(&#39;content&#39;);</span><br><span class="line">        if (content) &#123;</span><br><span class="line">            var initialDpr &#x3D; content.match(&#x2F;initial\-dpr&#x3D;([\d\.]+)&#x2F;);</span><br><span class="line">            var maximumDpr &#x3D; content.match(&#x2F;maximum\-dpr&#x3D;([\d\.]+)&#x2F;);</span><br><span class="line">            if (initialDpr) &#123;</span><br><span class="line">                dpr &#x3D; parseFloat(initialDpr[1]);</span><br><span class="line">                scale &#x3D; parseFloat((1 &#x2F; dpr).toFixed(2));    </span><br><span class="line">            &#125;</span><br><span class="line">            if (maximumDpr) &#123;</span><br><span class="line">                dpr &#x3D; parseFloat(maximumDpr[1]);</span><br><span class="line">                scale &#x3D; parseFloat((1 &#x2F; dpr).toFixed(2));    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!dpr &amp;&amp; !scale) &#123; </span><br><span class="line">    &#x2F;&#x2F;根据js获取到的devicePixelRatio设置dpr及scale，scale是dpr的倒数</span><br><span class="line">        var isAndroid &#x3D; win.navigator.appVersion.match(&#x2F;android&#x2F;gi);</span><br><span class="line">        var isIPhone &#x3D; win.navigator.appVersion.match(&#x2F;iphone&#x2F;gi);</span><br><span class="line">        var devicePixelRatio &#x3D; win.devicePixelRatio;</span><br><span class="line">        if (isIPhone) &#123;</span><br><span class="line">            &#x2F;&#x2F; iOS下，对于2和3的屏，分别用2和3倍方案</span><br><span class="line">            if (devicePixelRatio &gt;&#x3D; 3 &amp;&amp; (!dpr || dpr &gt;&#x3D; 3)) &#123;                </span><br><span class="line">                dpr &#x3D; 3;</span><br><span class="line">            &#125; else if (devicePixelRatio &gt;&#x3D; 2 &amp;&amp; (!dpr || dpr &gt;&#x3D; 2))&#123;</span><br><span class="line">                dpr &#x3D; 2;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                dpr &#x3D; 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F; 其他设备下，仍旧使用1倍的方案</span><br><span class="line">            dpr &#x3D; 1;</span><br><span class="line">        &#125;</span><br><span class="line">        scale &#x3D; 1 &#x2F; dpr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    docEl.setAttribute(&#39;data-dpr&#39;, dpr);</span><br><span class="line">    &#x2F;&#x2F;文本字号不建议使用rem，flexible适配方案中，文本使用px作为单位，使用[data-dpr]属性来区分不同dpr下的文本字号</span><br><span class="line">    </span><br><span class="line">    if (!metaEl) &#123;</span><br><span class="line">    &#x2F;&#x2F;添加meta标签，设置name为viewport，content根据scale设置缩放比(默认、最大、最小缩放比)</span><br><span class="line">        metaEl &#x3D; doc.createElement(&#39;meta&#39;);</span><br><span class="line">        metaEl.setAttribute(&#39;name&#39;, &#39;viewport&#39;);</span><br><span class="line">        metaEl.setAttribute(&#39;content&#39;, &#39;initial-scale&#x3D;&#39; + scale + &#39;, maximum-scale&#x3D;&#39; + scale + &#39;, minimum-scale&#x3D;&#39; + scale + &#39;, user-scalable&#x3D;no&#39;);</span><br><span class="line">        if (docEl.firstElementChild) &#123;</span><br><span class="line">            docEl.firstElementChild.appendChild(metaEl);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            var wrap &#x3D; doc.createElement(&#39;div&#39;);</span><br><span class="line">            wrap.appendChild(metaEl);</span><br><span class="line">            doc.write(wrap.innerHTML);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function refreshRem()&#123;</span><br><span class="line">        &#x2F;&#x2F;更新rem值</span><br><span class="line">        var width &#x3D; docEl.getBoundingClientRect().width;</span><br><span class="line">        if (width &#x2F; dpr &gt; 540) &#123;</span><br><span class="line">            width &#x3D; 540 * dpr;</span><br><span class="line">        &#125;</span><br><span class="line">        var rem &#x3D; width &#x2F; 10; &#x2F;&#x2F;1rem &#x3D; viewWidth &#x2F; 10</span><br><span class="line">        docEl.style.fontSize &#x3D; rem + &#39;px&#39;;</span><br><span class="line">        flexible.rem &#x3D; win.rem &#x3D; rem;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;resize与pageshow延时300ms触发refreshRem(),使用防抖函数，防止事件被高频触发可能引起性能问题</span><br><span class="line">    win.addEventListener(&#39;resize&#39;, function() &#123;</span><br><span class="line">        clearTimeout(tid);</span><br><span class="line">        tid &#x3D; setTimeout(refreshRem, 300);</span><br><span class="line">    &#125;, false);</span><br><span class="line">    win.addEventListener(&#39;pageshow&#39;, function(e) &#123;</span><br><span class="line">        &#x2F;&#x2F;当一条会话历史纪录被执行的时候触发事件，包括后退&#x2F;前进按钮，同时会在onload页面触发后初始化页面时触发</span><br><span class="line">        if (e.persisted) &#123;&#x2F;&#x2F;表示网页是否来自缓存</span><br><span class="line">            clearTimeout(tid);</span><br><span class="line">            tid &#x3D; setTimeout(refreshRem, 300);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, false);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;在html文档加载和解析完成后设置body元素字体大小</span><br><span class="line">    if (doc.readyState &#x3D;&#x3D;&#x3D; &#39;complete&#39;) &#123;</span><br><span class="line">        doc.body.style.fontSize &#x3D; 12 * dpr + &#39;px&#39;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        doc.addEventListener(&#39;DOMContentLoaded&#39;, function(e) &#123;</span><br><span class="line">            doc.body.style.fontSize &#x3D; 12 * dpr + &#39;px&#39;;</span><br><span class="line">        &#125;, false);</span><br><span class="line">    &#125; </span><br><span class="line">    &#x2F;&#x2F;浏览器有最小字体限制，css在pc上font-size是12px(移动端最小是8px), 也就是css像素是12，其DPR为1，在移动端dpr有可能为2和3，为了保证字体不变小，需要用12*dpr进行换算。</span><br><span class="line">   </span><br><span class="line">    refreshRem();</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;实现rem与px相互转换</span><br><span class="line">    flexible.dpr &#x3D; win.dpr &#x3D; dpr;</span><br><span class="line">    flexible.refreshRem &#x3D; refreshRem;</span><br><span class="line">    flexible.rem2px &#x3D; function(d) &#123;</span><br><span class="line">        var val &#x3D; parseFloat(d) * this.rem;</span><br><span class="line">        if (typeof d &#x3D;&#x3D;&#x3D; &#39;string&#39; &amp;&amp; d.match(&#x2F;rem$&#x2F;)) &#123;</span><br><span class="line">            val +&#x3D; &#39;px&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">        return val;</span><br><span class="line">    &#125;</span><br><span class="line">    flexible.px2rem &#x3D; function(d) &#123;</span><br><span class="line">        var val &#x3D; parseFloat(d) &#x2F; this.rem;</span><br><span class="line">        if (typeof d &#x3D;&#x3D;&#x3D; &#39;string&#39; &amp;&amp; d.match(&#x2F;px$&#x2F;)) &#123;</span><br><span class="line">            val +&#x3D; &#39;rem&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">        return val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)(window, window[&#39;lib&#39;] || (window[&#39;lib&#39;] &#x3D; &#123;&#125;));</span><br></pre></td></tr></table></figure><p> 优势</p><ul><li>兼容性好;</li><li>ios: 6.1系统以上都支持;</li><li>android: 2.1系统以上都支持;</li><li>大部分主流浏览器都支持</li></ul><p>不足</p><ul><li>不是纯css移动适配方案，需要引入js脚本 在头部内嵌一段 js脚本 监听分辨率的变化来动态改变根元素的字体大小，css样式和 js 代码有一定 耦合性，并且必须将改变font-size的代码放在 css 样式之前。<br>…</li><li>小数像素问题，浏览器渲染最小的单位是像素，元素根据屏幕宽度自适应，通过 rem 计算后可能会出现小数像素，浏览器会对这部分小数四舍五入，按照整数渲染。浏览器在渲染时所做的摄入处理只是应用在元素的尺寸渲染上，其真实占据的空间依旧是原始大小。也就是说如果一个元素尺寸是 0.625px，那么其渲染尺寸应该是 1px，空出的 0.375px 空间由其临近的元素填充；同样道理，如果一个元素尺寸是 0.375px，其渲染尺寸就应该是0，但是其会占据临近元素 0.375px 的空间。会导致：缩放到低于1px的元素时隐时现（解决办法：指定最小转换像素，对于比较小的像素，不转换为 rem 或 vw）；两个同样宽度的元素因为各自周围的元素宽度不同，导致两元素相差1px；宽高相同的正方形，长宽不等了；border-radius: 50% 画的圆不圆。<br>…</li><li>Android 浏览器下 line-height 垂直居中偏离的问题。常用的垂直居中方式就是使用line-height，这种方法在Android设备下并不能完全居中。<br>…</li><li>cursor: pointer 元素点击背景变色的问题，对添加了cursor:pointer属性的元素，在移动端点击时，背景会高亮。为元素添加tag-highlight-color:transparent 属性可以隐藏背景高亮。</li></ul><h3 id="vh-vw方案"><a href="#vh-vw方案" class="headerlink" title="vh/vw方案"></a>vh/vw方案</h3><ul><li>使用 css 预处理器把设计稿尺寸转换为 vw 单位，包括 文本，布局高宽，间距 等，使得这些元素能够随视口大小自适应调整。以1080px设计稿为基准，转化的计算表示为</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以1080px作为设计稿基准</span><br><span class="line">$vw_base: 1080</span><br><span class="line">@function vw($px) &#123;</span><br><span class="line">    @return($px &#x2F; 1080) * 100vw</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优势</p><ul><li>纯 css 移动端适配方案，不存在脚本依赖问题</li><li>相对于 rem 以根元素字体大小的倍数 定义 元素大小，逻辑清晰简单，视口单位依赖于视口的尺寸 “1vw ＝ 1/100 viewport width”，根据 视口尺寸的百分比 来定义 元素宽度</li></ul><p>不足</p><ul><li>存在一些兼容性问题，Android4.4以下不支持、</li></ul><h3 id="引入flexible-js实现了rem自适应"><a href="#引入flexible-js实现了rem自适应" class="headerlink" title="引入flexible.js实现了rem自适应"></a>引入flexible.js实现了rem自适应</h3><ul><li><p>使用方法，引入flexible.js.计算尺寸时，只需要将对应的尺寸除以100</p></li><li><p>flexible.js利用rem单位相对根元素<html>的font-size来做计算，而我们需要做的就是根据不同的屏幕算出html的font-size，而页面内的大小单位都根据rem来写，从而实现了自适应。<br>事实上他做了这几样事情：</p></li><li><p>动态改写&lt; meta&gt;标签</p></li><li><p>给&lt; html&gt;元素添加data-dpr属性，并且动态改写data-dpr的值</p></li><li><p>给&lt; html&gt;元素添加font-size属性，并且动态改写font-size的值</p></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.cnblogs.com/webspace/p/8625464.html#%E5%87%A0%E4%B8%AA%E4%B8%93%E6%9C%89%E5%90%8D%E8%AF%8D%E5%92%8C%E5%8D%95%E4%BD%8D" target="_blank" rel="noopener">web前端–移动端适配总结</a></li><li><a href="https://blog.csdn.net/qq1556837534/article/details/51843075" target="_blank" rel="noopener">详细解析 JavaScript 获取元素的坐标</a></li><li><a href="https://blog.csdn.net/llll789789/article/details/97267575" target="_blank" rel="noopener">CSS尺寸单位介绍</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css实现箭头，兼容ie8</title>
      <link href="/2019/12/25/css%E5%AE%9E%E7%8E%B0%E7%AE%AD%E5%A4%B4%EF%BC%8C%E5%85%BC%E5%AE%B9ie8/"/>
      <url>/2019/12/25/css%E5%AE%9E%E7%8E%B0%E7%AE%AD%E5%A4%B4%EF%BC%8C%E5%85%BC%E5%AE%B9ie8/</url>
      
        <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>css制作空心的上下左右的箭头<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        *&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:500px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:white</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.arrow-box</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:20px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*右箭头*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* border:1px solid blue; */</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right-arrow1</span>,<span class="selector-class">.right-arrow2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-top</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">transparent</span> <span class="selector-tag">dashed</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-right</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">transparent</span> <span class="selector-tag">dashed</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">transparent</span> <span class="selector-tag">dashed</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-left</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">white</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right-arrow1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:1px</span>;<span class="comment">/*重要*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-left</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">blue</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right-arrow2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-left</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">white</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*左箭头*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">z-index</span>: 2;<span class="comment">/*兼容ie8-*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* border:1px solid blue; */</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left-arrow1</span>,<span class="selector-class">.left-arrow2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">z-index</span><span class="selector-pseudo">:5</span>;<span class="comment">/*兼容ie8-*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-top</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">transparent</span> <span class="selector-tag">dashed</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-left</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">transparent</span> <span class="selector-tag">dashed</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">transparent</span> <span class="selector-tag">dashed</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-right</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">white</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left-arrow1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-right</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">blue</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left-arrow2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:1px</span>;<span class="comment">/*重要*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-right</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">white</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*上箭头*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.top</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">z-index</span>: 2;<span class="comment">/*兼容ie8-*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* border:1px solid blue; */</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.top-arrow1</span>,<span class="selector-class">.top-arrow2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">z-index</span>: 5;<span class="comment">/*兼容ie8-*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-top</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">transparent</span> <span class="selector-tag">dashed</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-left</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">transparent</span> <span class="selector-tag">dashed</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-right</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">transparent</span> <span class="selector-tag">dashed</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">white</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.top-arrow1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">blue</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.top-arrow2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:1px</span>;<span class="comment">/*重要*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">white</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*下箭头*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.bottom</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">z-index</span>: 2;<span class="comment">/*兼容ie8-*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* border:1px solid blue; */</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.bottom-arrow1</span>,<span class="selector-class">.bottom-arrow2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">z-index</span>: 5;<span class="comment">/*兼容ie8-*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">transparent</span> <span class="selector-tag">dashed</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-left</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">transparent</span> <span class="selector-tag">dashed</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-right</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">transparent</span> <span class="selector-tag">dashed</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-top</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">white</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.bottom-arrow1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:1px</span>;<span class="comment">/*重要*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-top</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">blue</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.bottom-arrow2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-top</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">white</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> 右箭头<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"arrow-right arrow-box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"right-arrow1"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"right-arrow2"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> 左箭头<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"arrow-left arrow-box"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"left-arrow1"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"left-arrow2"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> 上箭头<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"arrow-top arrow-box"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"top-arrow1"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"top-arrow2"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> 下箭头<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"arrow-bottom arrow-box"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bottom-arrow1"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bottom-arrow2"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><p><a href="https://guofes.github.io/learn/css/arrow/">演示</a></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css命名规范BEM及常用命名</title>
      <link href="/2019/12/18/ss%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83BEM%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E5%90%8D/"/>
      <url>/2019/12/18/ss%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83BEM%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="BEM"><a href="#BEM" class="headerlink" title="BEM"></a>BEM</h1><p>基于组件方式的web开发方法，基本思想是将用户界面分成独立的模块。</p><h1 id="B-Block（块）"><a href="#B-Block（块）" class="headerlink" title="B Block（块）"></a>B Block（块）</h1><ul><li>（通常指模块，组件）<blockquote><p>Block 是一个逻辑上和功能上独立的页面组件，等同于网页组件中的部件（等同于网页中的组件）。Block 封装了行为（Javascript）、模板、样式（CSS）和其他实现技术。独立状态的 Block 可供复用，并且促进项目开发和维护。</p></blockquote></li></ul><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li>模块名称：描述了它的目的（“它是什么？” —— 菜单或者按钮），而不是它的状态（“它看起来是什么样子？” —— 红色或者大的）。</li><li>模块不应该影响它所在的环境，这意味着你不应该为模块设置会影响到外部的形状（影响大小的 padding 或边框）和定位</li><li>不在使用 BEM 的时候使用 CSS 标签选择器和 ID 选择器</li><li>名称可以包含拉丁字母、数字、短划线</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="嵌套关系"><a href="#嵌套关系" class="headerlink" title="嵌套关系"></a>嵌套关系</h3><ul><li>模块与模块之间可以彼此嵌套</li><li>你可以有任意级别的嵌套层次<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 'head' 模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 嵌套 'logo' 模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 嵌套 'search-form' 模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"search-form"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 嵌套 'nav' 模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3></li><li>嵌套式的构造<blockquote><p>Block 可以被嵌套到任何其他 block 里面去。例如，一个头部 block 可以包含一个 logo、一个搜索表单和一个登录 block。</p></blockquote></li><li>随意放置<blockquote><p>Block 可以在一个页面内任意移动，也可以在页面之间或项目之间移动。Block 作为独立的实体来实现，这使得在页面上改变 block 的位置 并确保其功能和外观一切正常 成为可能。</p></blockquote></li><li>可复用<blockquote><p>一个界面可以包含同一个 block 的几个实例。</p></blockquote></li></ul><h1 id="E-Element（元素）"><a href="#E-Element（元素）" class="headerlink" title="E Element（元素）"></a>E Element（元素）</h1><ul><li><p>模块（block）的组成部分</p><blockquote><p>元素（Element）是一个模块（block）的组成部分，且不能脱离模块单独地被使用。例如，一个菜单项（a menu item ）不会在一个菜单块（a menu block ）范围之外使用，因此它是一个元素（element）。<br>一个界面可以包含同一个 block 的几个实例。</p></blockquote><h2 id="内容-1"><a href="#内容-1" class="headerlink" title="内容"></a>内容</h2></li><li><p>元素名称：描述了它的目的（用处）（“这是什么？” —— item，text，等等。），而不是它的状态（“什么类型的，或者它看起来是什么样的？” —— 红色，大的，等等。）</p></li><li><p>完整的元素名的结构是 block-name__element-name。元素的名字与模块的名字使用双下划线分隔（__）</p></li><li><p>元素名称可以包含拉丁字母、数字、短划线、下划线</p><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><h3 id="1嵌套关系"><a href="#1嵌套关系" class="headerlink" title="1嵌套关系"></a>1嵌套关系</h3></li><li><p>元素之间可以彼此嵌套</p></li><li><p>你可以拥有任意层次的嵌套级别</p></li><li><p>一个元素总是一个模块的一部分，而不是另一个元素的一部分，这意味着元素的名称不能被定义为 ‘block_elem1_elem2’ 这样的层次结构。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     正确的。完整的元素名的结构符合如下模式：</span></span><br><span class="line"><span class="comment">     'block-name__element-name'</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"search-form"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-form__content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"search-form__input"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"search-form__button"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-form__hot"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"search-form__hot-word"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"search-form__hot-word"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     不正确的。完整的元素名的结构不符合如下模式：</span></span><br><span class="line"><span class="comment">     'block-name__element-name'</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"search-form"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-form__content"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 推荐：'search-form__input' 或者 'search-form__content-input' --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"search-form__content__input"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 推荐：'search-form__button' 或者 'search-form__content-button' --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"search-form__content__button"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果在模块名称上定义了命名空间，也要保证元素名称是依赖于模块的（block_elem）。<br>在 DOM 树中，一个模块可以有元素嵌套结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block_elem1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block_elem2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block_elem3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 BEM 的方法论中，这样的模块结构通常表示为一个并列的元素列表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.block &#123;&#125;</span><br><span class="line">.block_elem1 &#123;&#125;</span><br><span class="line">.block_elem2 &#123;&#125;</span><br><span class="line">.block_elem3 &#123;&#125;</span><br></pre></td></tr></table></figure><p>你可以在不改变每个单独的元素的情况下改变一个模块的 DOM 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block_elem1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block_elem1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block_elem3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2组成部分"><a href="#2组成部分" class="headerlink" title="2组成部分"></a>2组成部分</h3><p>  一个元素总是一个模块的一部分，不可以单独使用</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 正确的。元素都位于 'search-form' 模块内 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 'search-form' 模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"search-form"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在 'search-form' 模块内的 'input' 元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"search-form__input"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在 'search-form' 模块内的 'button' 元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"search-form__button"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不正确的。元素位于 'search-form' 模块的上下文之外 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 'search-form' 模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"search-block"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在 'search-form' 模块内的 'input' 元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"search-form__input"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在 'search-form' 模块内的 'button' 元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"search-form__button"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3可选性"><a href="#3可选性" class="headerlink" title="3可选性"></a>3可选性</h3><p>一个元素是一个可选的模块组件。并不是所有的模块都必须有元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 'search-form' 模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-form"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 'input' 模块 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"input"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 'button' 模块 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>①如果这段代码可能被重用，并且它不依赖于页面上的其他组件，那你应该创建一个模块。</p><p>②如果这段代码在没有父实体（模块）的情况下不能使用，那你应该创建一个元素。</p><p>③为了简化开发，元素应该被分割成一小部分-子元素。在 BEM 方法论中，你不能创建元素的元素，在这种情况下，你需要创建一个服务模块，而不是创建一个元素。</p><h1 id="M-Modifier（修饰符）"><a href="#M-Modifier（修饰符）" class="headerlink" title="M Modifier（修饰符）"></a>M Modifier（修饰符）</h1><ul><li>BEM 实体<blockquote><p>Modifier 是一个 BEM 实体，它定义了一个 block 或 element 的外观和行为。<br>Modifier 可用也可不用（即不一定要用到 modifier）。<br>Modifier 本质上与 HTML 的属性很相似。同一个 block 会因为 modifier 的使用而 看起来与之前有所不同。<br>例如，菜单块（the menu block ）的外观可能会因为在它身上用了一个 modifier 而改变。</p></blockquote></li></ul><h2 id="内容-2"><a href="#内容-2" class="headerlink" title="内容"></a>内容</h2><p>一种用于定义模块和元素的外观，状态和行为的实体。</p><ul><li><p>修饰符的名称：描述了它的外观（“多大？”或者“它的主题是什么？”等等—— size-s 或者 theme-islands），它的状态（“它与其他有什么不同？” —— disabled，focused，等等）以及他的行为（“它的行为什么？”或者“它如何响应用户？”——比如 directions-left-top）。</p></li><li><p>修饰符的名字与模块或者元素的名字使用双连字符（–）</p></li><li><p>修饰符名称可以包含拉丁字母、数字短划线、下划线</p><h3 id="修饰符的类型"><a href="#修饰符的类型" class="headerlink" title="修饰符的类型"></a>修饰符的类型</h3><p>1、Boolean</p></li><li><p>当修饰符的存在或不存在是重要的，与它的值无关时使用这种类型的修饰符。比如：disabled。如果一个布尔类型的修饰符是可见的，它的值被假定为 true。</p></li><li><p>修饰符的全名的结构遵循如下模式：</p></li><li><p>Modifier（修饰符 ）</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; block-name–modifier-name</span><br><span class="line">&gt; block-name__element-name–modifier-name</span><br><span class="line">```html</span><br><span class="line"><span class="comment">&lt;!-- 'search-form' 模块有一个 ‘focused’ 的布尔类型的修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"search-form search-form--focused"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"search-form__input"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 'button' 元素有一个 'disabled' 的布尔类型修饰符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"search-form__button search-form__button--disabled"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、键-值</p><ul><li><p>当修饰符的值是重要的使用键值对类型。</p><blockquote><p>“一个 islands 设计主题的按钮”：menu–theme-islands</p></blockquote></li><li><p>这种类型的修饰符的全名的结构遵循如下模式：</p><blockquote><p>block-name–modifier-name-modifier-value<br>block-name__element-name_modifier-name_modifier-value</p></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- The `search-form` 模块有值为 'islands' 的 `theme` 修饰 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"search-form search-form--theme-islands"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"search-form__input"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- The `button` 元素有值为 'm' 的 `size` 修饰 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"search-form__button search-form__button--size-m"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 你不能同时使用两个具有不同值的的相同修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"search-form</span></span></span><br><span class="line"><span class="tag"><span class="string">             search-form--theme-islands</span></span></span><br><span class="line"><span class="tag"><span class="string">             search-form--theme-lite"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"search-form__input"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"search-form__button</span></span></span><br><span class="line"><span class="tag"><span class="string">                   search-form__button--size-s</span></span></span><br><span class="line"><span class="tag"><span class="string">                   search-form__button--size-m"</span>&gt;</span></span><br><span class="line">        Search</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h2><p>一个修饰符不能被单独使用。</p><ul><li>从 BEM 的角度，一个修饰符不能脱离模块或元素而被使用。一个修饰符应该改变实体的外观，行为或者状态，而不是替换它。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 正确的。'search-form' 模块有值为 'islands' 的 'theme' 修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"search-form search-form--theme-islands"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"search-form__input"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"search-form__button"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不正确的。'search-form' 丢失了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"search-form--theme-islands"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"search-form__input"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"search-form__button"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>混合模式：一种在单一的 DOM 节点上使用不同 BEM 实体的技术</p><ul><li>混合模式允许<blockquote><p>结合多个实体的行为和样式，而不是重复编写代码<br>在现有代码的基础上创建具有新语义的UI组件</p></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 'header' 模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        将 'header' 模块的 'search-form' 元素与 'search-form' 模块混合在一起使用</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-form header__search-form"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们将 header 模块的 search-form 元素与 search-form 模块的行为和样式结合在一起。这种方式允许我们在 header__search-form 元素上设置额外的形状和定位，而 search-form 模块仍然是通用的。因此，我们可以在任何环境中使用模块，因为模块没有指定任何填充。这正是我们可以独立调用模块的原因。</p><p>文件系统：在 BEM 方法论中采用的组件概念同样适用于项目的文件结构中。模块、元素和修饰符的实现可以被分在独立的文件中，这意味着，我们单独地使用它们。</p><ul><li>一个单独的模块对应一个单独的目录</li><li>模块和其对应的目录拥有相同的名字。比如， header 模块放置在 header/ 目录中，menu 模块放置在 menu/ 目录中。</li><li>一个模块的实现分为单独的文件。比如， header.css 和 header.js。</li><li>模块目录是其元素和修饰所在目录的根目录。</li><li>元素目录的名称以双下划线（_）开始。比如，header/_logo/ 和 menu/_item。</li><li>修饰目录的名称以单下划线（_）开始。比如，header_fixed 和 menu/_theme_islands/。</li><li>元素和修饰的实现分为不同的文件。比如，header_input.js 和 header_theme_islands.css。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">search-form&#x2F;                           # Directory of the search-form</span><br><span class="line"></span><br><span class="line">    __input&#x2F;                           # Subdirectory of the search-form__input</span><br><span class="line">        search-form__input.css         # CSS implementation of the</span><br><span class="line">                                       # search-form__input element</span><br><span class="line">        search-form__input.js          # JavaScript implementation of the</span><br><span class="line">                                       # search-form__input element</span><br><span class="line"></span><br><span class="line">    __button&#x2F;                          # Subdirectory of the search-form__button element</span><br><span class="line">        search-form__button.css</span><br><span class="line">        search-form__button.js</span><br><span class="line"></span><br><span class="line">    _theme&#x2F;                            # Subdirectory of the search-form_theme modifier</span><br><span class="line">        search-form_theme_islands.css  # CSS implementation of the search-form block</span><br><span class="line">                                       # that has the theme modifier with the value</span><br><span class="line">                                       # islands</span><br><span class="line">        search-form_theme_lite.css     # CSS implementation of the search-form block</span><br><span class="line">                                       # that has the theme modifier with the value</span><br><span class="line">                                       # lite</span><br><span class="line"></span><br><span class="line">search-form.css                        # CSS implementation of the search-form block</span><br><span class="line">search-form.js                         # JavaScript implementation of the</span><br><span class="line">                                       # search-form block</span><br></pre></td></tr></table></figure><p>这样的文件结构可以很好地支持我们重用代码。</p><h2 id="BEM-entity（BEM-实体）"><a href="#BEM-entity（BEM-实体）" class="headerlink" title="BEM entity（BEM 实体）"></a>BEM entity（BEM 实体）</h2><blockquote><p>Block,element 和 modifier 合起来就被成为 BEM entity。它是一个 既可以用来指代单独的 BEM 实体又可以作为 block、element 和 modifier 的总称的 概念。</p></blockquote><h2 id="Mix（混合体）"><a href="#Mix（混合体）" class="headerlink" title="Mix（混合体）"></a>Mix（混合体）</h2><blockquote><p>Mix 是被托管在（being hosted on）一个单独的 DOM 节点上的 不同 BEM 实体（混合而成）的一个实例。</p></blockquote><p>Mix允许我们</p><ul><li>把几个 BEM 实体的功能（behavior）和样式 组合在一起，同时避免重复代码</li><li>在现有的 BEM 实体的基础上 创建语义上的新界面组件。让我们想一下这种 mix 情形：把一个 block 与 另一个 block 的一个 element 组合在一起。</li></ul><p>我们假设，项目里的链接（links）通过一个链接块（a link block）来实现。我们需要把菜单项（menu items ）格式化成链接（links）。这里有几种实现方法：</p><ul><li>创建一个 可以把菜单项（item）转变成链接（link）的 modifier。实现这样一个 modifier 即必然牵涉到 复制链接块的功能和样式。这样一来就会导致代码重复。</li><li>取一个 把一个通用的链接块（link block ）与一个菜单块的一个链接元素（a link element ） 组合在一起的 mix。两个 BEM 实体的混合体（mix）可以让我们不用复制代码，就可以使用链接块的基本链接功能 和 菜单块的 CSS 规则。</li></ul><h2 id="BEM-tree（BEM-树-）"><a href="#BEM-tree（BEM-树-）" class="headerlink" title="BEM tree（BEM 树 ）"></a>BEM tree（BEM 树 ）</h2><blockquote><p>BEM tree 是网页结构在 block、element 和 modifier 方面的表示（representation）。这是一个在 DOM 树之上的抽象概念，它描述了 BEM 实体的名称、它们的状态、顺序、嵌套和辅助数据。在现实生活中的项目，BEM tree可以呈现在任何支持树结构的形式（format）中。</p></blockquote><p>一个DOM树</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"search-form"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lang-switcher"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure><p>BEM tree</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">header</span><br><span class="line">    ├──logo</span><br><span class="line">    └──search-form</span><br><span class="line">        ├──input</span><br><span class="line">        └──button</span><br><span class="line">    └──lang-switcher</span><br></pre></td></tr></table></figure><p>在 XML 和 BEMJSON 格式中，该 BEM tree 则是这样的<br>XML</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;block:header&gt;</span><br><span class="line">    &lt;block:logo&#x2F;&gt;</span><br><span class="line">    &lt;block:search-form&gt;</span><br><span class="line">        &lt;block:input&#x2F;&gt;</span><br><span class="line">        &lt;block:button&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;block:search-form&gt;</span><br><span class="line">    &lt;block:lang-switcher&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;block:header&gt;</span><br></pre></td></tr></table></figure><p>BEMJSON</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    block: &#39;header&#39;,</span><br><span class="line">    content : [</span><br><span class="line">        &#123; block : &#39;logo&#39; &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            block : &#39;search-form&#39;,</span><br><span class="line">            content : [</span><br><span class="line">                &#123; block : &#39;input&#39; &#125;,</span><br><span class="line">                &#123; block : &#39;button&#39; &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; block : &#39;lang-switcher&#39; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Block-implementation（BEM实现-）"><a href="#Block-implementation（BEM实现-）" class="headerlink" title="Block implementation（BEM实现 ）"></a>Block implementation（BEM实现 ）</h3><p>   Block implementation 是指一组各不相同的 技术，这些技术决定着 BEM 实体以下几方面：</p><ul><li>行为/功能（behavior）</li><li>外观</li><li>测试</li><li>模板</li><li>文档（documentation）</li><li>依赖描述</li><li>附加数据（例如：图片）</li></ul><h3 id="Implementation-technology（实现技术）"><a href="#Implementation-technology（实现技术）" class="headerlink" title="Implementation technology（实现技术）"></a>Implementation technology（实现技术）</h3><pre><code>Implementation technology 是一种用于实现一个 block 的技术。Block 可以用一种或多种技术来实现，例如：</code></pre><ul><li>行为/功能（behavior）– JavaScript, CoffeeScript</li><li>外观– CSS, Stylus, Sass</li><li>模板– BEMHTML, BH, Jade, Handlebars, XSL</li><li>文档（documentation）– Markdown, Wiki, XML</li></ul><p>例如，如果一个 block 的外观是用 CSS 来定义的，这意味着 block 是用 CSS 技术实现的。同样地，如果一个 block 的文档是用 Markdown 格式写的，block 就是用 Markdown 技术来实现的。</p><h3 id="Block-redefinition（块重定义）"><a href="#Block-redefinition（块重定义）" class="headerlink" title="Block redefinition（块重定义）"></a>Block redefinition（块重定义）</h3><pre><code>Block implementation 是指通过在不同的层级上增加新的功能到 block 来修改 block。</code></pre><h3 id="Redifinition-level（重定义等级）"><a href="#Redifinition-level（重定义等级）" class="headerlink" title="Redifinition level（重定义等级）"></a>Redifinition level（重定义等级）</h3><pre><code>Redefinition level 是指一组 BEM 实体和它们的部分实现。</code></pre><p>一个 block 的最终实现 可以被分成 不同的重定义层级。每一个新的层级都会扩展或覆盖原始的 block implementation。最终的结果由 来自所有按照预设的连续的顺序排列的重定义层级的独立的 block implementation technologies 组合而成。<br>任何 BEM 的实现技术都可以被重新定义。</p><p>例如，有一个连接到项目的第三方库。这个库包含现成的 block implementation。该项目指定的 block 保存在一个另一个重定义层级。比方说，我们需要修改这个库里的某一个 block 的外观。这并不需要在库的源代码里修改 block 的 CSS 规则 或者 在项目里复制代码。我们只需在项目里为 那一个 block 创建额外的 CSS 规则。在生成过程中，最终实现将会结合库级别的原有规则和项目级别中新的样式规则。</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伪类和伪元素</title>
      <link href="/2019/12/18/%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/"/>
      <url>/2019/12/18/%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="伪类和伪元素定义与区别"><a href="#伪类和伪元素定义与区别" class="headerlink" title="伪类和伪元素定义与区别"></a>伪类和伪元素定义与区别</h2><ul><li><p>伪类用于在页面中的元素处于某个状态时，为其添加指定的样式。</p></li><li><p>伪元素会创建一个抽象的伪元素，这个元素不是DOM中的真实元素，但是会存在于最终的渲染树中，我们可以为其添加样式。</p><blockquote><p>最常规的区分伪类和伪元素的方法是：实现伪类的效果可以通过添加类来实现，但是想要实现伪元素的等价效果只能创建实际的DOM节点。<br>注意伪类使用单冒号 “:” ; 伪元素使用双冒号 “::”</p></blockquote></li></ul><h1 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h1><ul><li>伪元素可以分为排版伪元素、突出显示伪元素、树中伪元素三类。</li></ul><h3 id="排版伪元素"><a href="#排版伪元素" class="headerlink" title="排版伪元素"></a>排版伪元素</h3><ul><li><p>[::first-letter]</p><p>  1.所有前导标点符号应与第一个字母一同应用该样式;</p><p>  2.只能与块级元素关联</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.firstLine::first-line &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        text-transform: uppercase;</span><br><span class="line">        background: #f3f3f3;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"firstLine"</span>&gt;</span>hello world hello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello world <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="突出显示伪元素"><a href="#突出显示伪元素" class="headerlink" title="突出显示伪元素"></a>突出显示伪元素</h3><ul><li>[:selection]</li><li>默认这个伪元素是行内元素，且继承元素可继承的属性</li><li>只支持颜色和背景颜色两个样式,只支持双冒号写法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">     .tuchu::selection&#123;</span><br><span class="line">         color: red;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tuchu"</span>&gt;</span></span><br><span class="line">        突出显示</span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="树中伪元素"><a href="#树中伪元素" class="headerlink" title="树中伪元素"></a>树中伪元素</h3><ul><li>[::before &amp; ::after]等</li><li>::before是在源元素的实际内容前添加伪元素。</li><li>::after是在源元素的实际内容后添加伪元素。当::before/::after伪元素的content属性不为’none’时，这两类伪元素就会生成一个元素，作为源元素的子元素，可以和DOM树中的元素一样定义样式。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.after::after&#123;</span><br><span class="line">   content: '::after';</span><br><span class="line">   display: block;</span><br><span class="line">   width: 100px;</span><br><span class="line">   height: 100px;</span><br><span class="line">   background: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"after"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="伪元素速查"><a href="#伪元素速查" class="headerlink" title="伪元素速查"></a>伪元素速查</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* Typographic Pseudo-elements *&#x2F;</span><br><span class="line">::first-line            &#x2F;* 选取文字块首行字符 *&#x2F;</span><br><span class="line">::first-letter          &#x2F;* 选取文字块首行首个字符 *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;* Highlight Pseudo-elements *&#x2F;</span><br><span class="line">::selection             &#x2F;* 选取文档中高亮(反白)的部分*&#x2F;</span><br><span class="line">::inactive-selection    &#x2F;* 选取非活动状态时文档中高亮(反白)的部分*&#x2F;</span><br><span class="line">::spelling-error        &#x2F;* 选取被 UA 标记为拼写错误的文本 *&#x2F;</span><br><span class="line">::grammar-error         &#x2F;* 选取被 UA 标记为语法错误的文本 *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;* Tree-Abiding Pseudo-elements *&#x2F;</span><br><span class="line">::before                &#x2F;* 在选中元素中创建一个前置的子节点 *&#x2F;</span><br><span class="line">::after                 &#x2F;* 在选中元素中创建一个后置的子节点 *&#x2F;</span><br><span class="line">::marker                &#x2F;* 选取列表自动生成的项目标记符号 *&#x2F;</span><br><span class="line">::placeholder           &#x2F;* 选取字段的占位符文本(提示信息) *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;* WebVTT Format *&#x2F;</span><br><span class="line">::cue                   &#x2F;* 匹配所选元素中 WebVTT 提示 *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;* Fullscreen API *&#x2F;</span><br><span class="line">::backdrop              &#x2F;* 匹配全屏模式下的背景 *&#x2F;</span><br></pre></td></tr></table></figure><h1 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h1><h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><ul><li>关于锚点a，有常见的5个伪类，分别是:link,:hover,:active,:focus,:visited</li></ul><h3 id="伪类顺序"><a href="#伪类顺序" class="headerlink" title="伪类顺序"></a>伪类顺序</h3><p>对于伪类顺序，有一个口诀是love-hate，代表着伪类的顺序是link、visited、focus、hover、active。但是否伪类的顺序只能如此呢？为什么是这个顺序呢？</p><p>CSS层叠中有一条法则十分重要，就是后面覆盖前面，所以伪类的顺序是需要精心考虑的。</p><p>【1】link和visited必须在最前面，且没有先后顺序，否则link或visited的效果将覆盖 hover active focus</p><p>注意link和visited称为静态伪类，只能应用于超链接</p><p>【2】hover、active、focus这三个伪类必须是focus、hover、active的顺序，因为在focus状态下，也需要触发hover和active，而要触发active一定要先触发hover，所以active要放在hover后面</p><h3 id="UI元素伪类"><a href="#UI元素伪类" class="headerlink" title="UI元素伪类"></a>UI元素伪类</h3><p>UI元素伪类包括:enabled、:disabled、:checked三个，主要针对于HTML中的form元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">:enabled    可用状态</span><br><span class="line">:disabled   不可用状态</span><br><span class="line">:checked    选中状态</span><br><span class="line"></span><br><span class="line">input:enabled&#123;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">    background-color: transparent;</span><br><span class="line">&#125;</span><br><span class="line">input:disabled&#123;</span><br><span class="line">    border: none;</span><br><span class="line">    background-color: gray;</span><br><span class="line">&#125;</span><br><span class="line">input:checked&#123;</span><br><span class="line">    outline: 2px solid lightblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span> = <span class="string">"btn.disabled = false;"</span>&gt;</span>按钮可用<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span> = <span class="string">"btn.disabled = true;"</span>&gt;</span>按钮不可用<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"按钮"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Male<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Female<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span>  /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结构伪类"><a href="#结构伪类" class="headerlink" title="结构伪类"></a>结构伪类</h3><p>【1】:nth-child(n)、:nth-last-child(n)、first-child、last-child、:only-child</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">E F:nth-child(n)           选择父元素的第n个子元素</span><br><span class="line">E F:nth-last-child(n)      选择父元素的倒数第n个子元素</span><br><span class="line">E F:first-child            父元素的第一个子元素，与E F:nth-child(1)等同</span><br><span class="line">E F:last-child             父元素的最后一个子元素，与E F:nth-last-child(1)等同</span><br><span class="line">E F:only-child             选择父元素中只包含一个子元素</span><br><span class="line"></span><br><span class="line">p:first-child    　　 代表的并不是<span class="tag">&lt;<span class="name">p</span>&gt;</span>的第一个子元素，而是<span class="tag">&lt;<span class="name">p</span>&gt;</span>元素是某元素的第一个子元素</span><br><span class="line">p &gt; i:first-child    匹配所有<span class="tag">&lt;<span class="name">p</span>&gt;</span>元素中的第一个<span class="tag">&lt;<span class="name">i</span>&gt;</span>元素</span><br><span class="line">p:first-child i 　　  匹配所有作为第一个子元素的<span class="tag">&lt;<span class="name">p</span>&gt;</span>元素中的所有<span class="tag">&lt;<span class="name">i</span>&gt;</span>元素</span><br></pre></td></tr></table></figure><p>【2】:nth-of-type(n)、:nth-last-of-type(n)、:first-of-type、:last-of-type、:only-of-type</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">E F:nth-of-type(n)          选择父元素的具有指定类型的第n个子元素</span><br><span class="line">E F:nth-last-of-type(n)     选择父元素的具有指定类型的倒数第n个子元素</span><br><span class="line">E F:first-of-type           选择父元素中具有指定类型的第1个子元素，与E F:nth-of-type(1)相同</span><br><span class="line">E F:last-of-type         　  选择父元素中具有指定类型的最后1个子元素，与E F:nth-last-of-type(1)相同</span><br><span class="line">E F:only-of-type        　　 选择父元素中只包含一个同类型的子元素</span><br><span class="line"></span><br><span class="line">.box div:nth-of-type(even)&#123;color: red;&#125; </span><br><span class="line">.box p:nth-last-of-type(3)&#123;color: green;&#125;</span><br><span class="line">.box div:first-of-type&#123;color: blue;&#125;</span><br><span class="line">.box p:last-of-type&#123;color: yellow;&#125;</span><br><span class="line">.box div:only-of-type&#123;color: pink;</span><br></pre></td></tr></table></figure><p>【3】:root、:not、:empty、:target</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">:root        　选择文档的根元素</span><br><span class="line">:not         　选择除某个元素之外的所有元素</span><br><span class="line">:empty         选择没有子元素的元素，而且该元素也不包含任何文本节点</span><br><span class="line">:target     　 匹配锚点对应的目标元素</span><br><span class="line"></span><br><span class="line">[注意]:not选择器常用于导航之间的竖线处理，如li:not(:last-of-type)</span><br><span class="line"></span><br><span class="line">:root&#123;color:red;&#125;</span><br><span class="line">div:not&#123;background-color: lightgrey;&#125;</span><br><span class="line">p:empty&#123;height:30px;width:30px;background:pink;&#125;</span><br><span class="line">:target&#123;color:blue;&#125; // 当点击页面上面的锚点时，锚点到的目标元素会采用这个样式</span><br></pre></td></tr></table></figure><h2 id="伪类速查表"><a href="#伪类速查表" class="headerlink" title="伪类速查表"></a>伪类速查表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">/* Logical Combinations */</span><br><span class="line">    :matches() /*:any()*/   /* 匹配 集合内指定 的元素 */</span><br><span class="line">    :not()                  /* 排除 满足指定关系 的元素 */</span><br><span class="line">    :has()                  /* 匹配 满足指定关系 的元素*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* Linguistic Pseudo-classes */</span><br><span class="line">    :dir()                  /* 匹配 设置dir(文字书写方向)属性 的元素 */</span><br><span class="line">    :lang()                 /* 匹配 设置lang(定义元素语言)属性 的元素 */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* Location Pseudo-classes */</span><br><span class="line">    :any-link               /* 匹配 任意有链接锚点 的元素*/</span><br><span class="line">    :link                   /* 匹配 未处于访问记录中 的链接 */</span><br><span class="line">    :visited                /* 匹配 处于访问记录中 的链接 */</span><br><span class="line">    :target                 /* 匹配 URL指向的锚点 的元素 */</span><br><span class="line">    :scope                  /* 匹配 设置scoped属性的style标签 的作用域 */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* User Action Pseudo-classes */</span><br><span class="line">    :hover                  /* 匹配 处于鼠标悬停状态 的元素 */</span><br><span class="line">    :active                 /* 匹配 处于激活状态 的元素 */</span><br><span class="line">    :focus                  /* 匹配 处于聚焦状态 的元素 */</span><br><span class="line">    :focus-ring             /* 匹配 处于聚焦状态元素 的UA样式(聚焦轮廓) */</span><br><span class="line">    :focus-within           /* 匹配 子节点处于聚焦状态 的元素 */</span><br><span class="line">    :drop                   /* 匹配 处于拖拽状态 的元素 */</span><br><span class="line">    :drop()                 /* 匹配 处于指定拖拽状态 的元素 */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* Time-dimensional Pseudo-classes */</span><br><span class="line">    :current                /* 匹配 处于当前状态 的定义了timeline属性的元素 */</span><br><span class="line">    :past                   /* 匹配 处于过去状态 的定义了timeline属性的元素 */</span><br><span class="line">    :future                 /* 匹配 处于将来状态 的定义了timeline属性的元素 */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* Resource State Pseudos */</span><br><span class="line">    :playing                /* 匹配 处于播放状态 的元素 */</span><br><span class="line">    :paused                 /* 匹配 处于暂停状态 的元素 */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* The Input Pseudo-classes */</span><br><span class="line">    :enabled                /* 匹配 可以编辑 的元素 */</span><br><span class="line">    :disabled               /* 匹配 禁止编辑 的元素 */</span><br><span class="line">    :read-only              /* 匹配 内容只读 的元素 */</span><br><span class="line">    :read-write             /* 匹配 内容可编辑 的元素 */</span><br><span class="line">    :placeholder-shown      /* 匹配 显示字段占位符文本 的元素 */</span><br><span class="line">    :default                /* 匹配 页面载入默认选中 的元素 */</span><br><span class="line"></span><br><span class="line">    :checked                /* 匹配 选中状态 的元素 */</span><br><span class="line">    :indeterminate          /* 匹配 模糊状态 的元素 */</span><br><span class="line"></span><br><span class="line">    :valid                  /* 匹配 输入内容通过类型验证 的元素 */</span><br><span class="line">    :invalid                /* 匹配 输入内容无法通过类型验证 的元素 */</span><br><span class="line">    :in-range               /* 匹配 输入数值符合范围 的元素 */</span><br><span class="line">    :out-of-range           /* 匹配 输入数值溢出范围 的元素 */</span><br><span class="line">    :required               /* 匹配 设置必填属性 的元素 */</span><br><span class="line">    :optional               /* 匹配 可选字段 的元素 */</span><br><span class="line">    :user-invalid           /* 匹配 用户输入内容未通过验证 的元素 */</span><br><span class="line"></span><br><span class="line">    /* Tree-Structural pseudo-classes */</span><br><span class="line">    :root                   /* 匹配 文档树 的根元素*/</span><br><span class="line">    :empty                  /* 匹配 无子节点 的元素 */</span><br><span class="line">    :blank                  /* 匹配 仅包含空格或者换行符 的元素 */</span><br><span class="line"></span><br><span class="line">    :nth-child(n)           /* 匹配 符合元素集合中指定位置 的元素 */</span><br><span class="line">    :nth-last-child(n)      /* 反序匹配 符合元素集合内指定位置 的元素 */</span><br><span class="line">    :first-child            /* 匹配 符合元素集合内首个 的元素 */</span><br><span class="line">    :last-child             /* 匹配 符合元素集合内末尾 的元素 */</span><br><span class="line">    :only-child             /* 匹配 无兄弟节点 的元素 */</span><br><span class="line"></span><br><span class="line">    :nth-of-type(n)         /* 匹配 符合元素集合中同类型指定位置 的元素 */</span><br><span class="line">    :nth-last-of-type(n)    /* 反序匹配 符合元素集合中同类型指定位置 的元素 */</span><br><span class="line">    :first-of-type          /* 匹配 每个在元素集合中初次出现 的元素 */</span><br><span class="line">    :last-of-type           /* 匹配 每个在元素集合中末次出现 的元素 */</span><br><span class="line">    :only-of-type           /* 匹配 无同类兄弟节点 的元素*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* Fullscreen API */</span><br><span class="line">    :fullscreen             /* 匹配 全屏显示模式中 的元素 */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* Page Selectors */</span><br><span class="line">    :first                  /* 打印文档时首页的样式 */</span><br><span class="line">    :left                   /* 打印文档时左侧的样式 */</span><br><span class="line">    :right                  /* 打印文档时右侧的样式 */</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFC定义与原理</title>
      <link href="/2019/12/15/C%E5%AE%9A%E4%B9%89%E4%BA%8E%E5%8E%9F%E7%90%86/"/>
      <url>/2019/12/15/C%E5%AE%9A%E4%B9%89%E4%BA%8E%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h1><ul><li>BFC（Block Formatting Context）块级格式化上下文，是Web页面中盒模型布局的CSS渲染模式，指一个独立的渲染区域或者说是一个隔离的独立容器。</li></ul><h1 id="形成BFC的条件"><a href="#形成BFC的条件" class="headerlink" title="形成BFC的条件"></a>形成BFC的条件</h1><ul><li>1、浮动元素，float 除 none 以外的值； </li><li>2、定位元素，position（absolute，fixed）； </li><li>3、display 为以下其中之一的值 inline-block，table-cell，table-caption； </li><li>4、overflow 除了 visible 以外的值（hidden，auto，scroll）；</li></ul><h1 id="BFC的特性"><a href="#BFC的特性" class="headerlink" title="BFC的特性"></a>BFC的特性</h1><ul><li>1.内部的Box会在垂直方向上一个接一个的放置。(对比IFC(行内格式化上下文)的特性，盒子在水平方向一个接着一个排列。)</li><li>2.垂直方向上的距离由margin决定</li><li>3.bfc的区域不会与float的元素区域重叠。</li><li>4.计算bfc的高度时，浮动元素也参与计算</li><li>5.bfc就是页面上的一个独立容器，容器里面的子元素不会影响外面元素。<a id="more"></a></li></ul><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><h3 id="特性2："><a href="#特性2：" class="headerlink" title="特性2："></a>特性2：</h3><blockquote><p>场景一：外边距折叠（margin collapse）,一是父子外边距叠加，二是兄弟外边距叠加</p></blockquote><ul><li>一个父盒子如果没有padding-top和border-top，这个父盒子的margin-top会和其内部文档流中的第一个子元素的margin-top重叠(父子div的margin重叠)形成BFC可解决</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>bfc<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.father_box</span>&#123;</span></span><br><span class="line">        background: red;</span><br><span class="line">        width: 300px;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">        height: 300px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.son_box</span>&#123;</span></span><br><span class="line">        background: green;</span><br><span class="line">        height: 150px;</span><br><span class="line">        width: 300px;</span><br><span class="line">        margin-top: 100px;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father_box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son_box"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>场景二：两栏布局（左边固定，右边自适应），三栏布局（中间自适应）</p></blockquote><ul><li>bfc的区域不会与float的元素区域重叠 </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>bfc<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.column</span>&#123;</span></span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            margin-right: 10px;</span><br><span class="line">            background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;<span class="comment">/*创建bfc */</span></span></span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: purple;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>场景三  计算bfc的高度时，浮动元素也参与计算(利用overflow:hidden清除浮动,浮动的盒子无法撑出处于标准文档流的父盒子的height)</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.float_height&#123;</span><br><span class="line">    background: #000;</span><br><span class="line">    width: 100%;</span><br><span class="line">    overflow: hidden;/*创建bfc */</span><br><span class="line">&#125;</span><br><span class="line">.box3&#123;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 200px;</span><br><span class="line">    float: left;</span><br><span class="line">    background: #0c0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float_height"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><a href="https://guofes.github.io/learn/css/bfc/index.html">演示地址</a></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>层叠上下文和层叠顺序</title>
      <link href="/2019/12/13/%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E5%B1%82%E5%8F%A0%E9%A1%BA%E5%BA%8F/"/>
      <url>/2019/12/13/%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E5%B1%82%E5%8F%A0%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-层叠上下文"><a href="#1-层叠上下文" class="headerlink" title="1.层叠上下文"></a>1.层叠上下文</h2><p>层叠上下文是HTML中的一个三维的概念。如果一个元素含有层叠上下文，我们可以理解这个元素在z轴上值大。有三种方式有三种</p><ul><li>页面根元素天生具有层叠上下文，称之为“根层叠上下文”。</li><li>z-index值为数值的定位元素的传统层叠上下文。（定位元素默认z-index:0，所以会在普通元素上面）</li><li>其他CSS3属性。</li></ul><h2 id="2-层叠水平"><a href="#2-层叠水平" class="headerlink" title="2.层叠水平"></a>2.层叠水平</h2><ul><li>层叠水平决定了同一个层叠上下文中元素在z轴上的显示顺序。  页面中的每个元素都是独立的个体，他们一定是会有一个类似的排名排序的情况存在。而这个排名排 序、论资排辈就是我们这里所说的“层叠水平”。</li></ul><h2 id="3-层叠顺序"><a href="#3-层叠顺序" class="headerlink" title="3.层叠顺序"></a>3.层叠顺序</h2><ul><li>层叠顺序表示元素发生层叠时候有着特定的垂直显示顺序，注意，这里跟上面两个不一样，上面的层叠上下文和层叠水平是概念，而这里的层叠顺序是规则<blockquote><p>在css2的时代，层叠顺序遵循下面的顺序（css3存在的情况不符合下面规则）</p></blockquote></li><li>background/border &lt; 负z-index &lt; block块状水平盒子 &lt; float浮动盒子 &lt; inline/inline-block水平盒子 &lt; z-index: auto(可以看成z-index: 0)&lt; 正z-index</li></ul><p>顺序以上的原因是层叠顺序是从装饰——布局——内容由低到高排列，border/background一般为装饰属性，而浮动和块状元素一般用作布局，而内联元素都是内容，网页中最重要的就是内容。</p><a id="more"></a><h2 id="4-层叠准则"><a href="#4-层叠准则" class="headerlink" title="4.层叠准则"></a>4.层叠准则</h2><ul><li>谁大谁上：当具有明显的层叠水平标示的时候，如识别的z-indx值，在同一个层叠上下文领域，层叠水平值大的那一个覆盖小的那一个。</li><li>后来居上：当元素的层叠水平一致、层叠顺序相同的时候，在DOM流中处于后面的元素会覆盖前面的元素。</li></ul><h2 id="5-特性"><a href="#5-特性" class="headerlink" title="5.特性"></a>5.特性</h2><p>层叠上下文元素有如下特性：</p><pre><code>层叠上下文的层叠水平要比普通元素高（原因后面会说明）；层叠上下文可以阻断元素的混合模式（见此文第二部分说明）；层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文。每个层叠上下文和兄弟元素独立，也就是当进行层叠变化或渲染的时候，只需要考虑后代元素。每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。</code></pre><p>翻译成真实世界语言就是：</p><pre><code>当官的比老百姓更有机会面见圣上；领导下去考察，会被当地官员阻隔只看到繁荣看不到真实民情；一个家里，爸爸可以当官，孩子也是可以同时当官的。但是，孩子这个官要受爸爸控制。自己当官，兄弟不占光。有什么福利或者变故只会影响自己的孩子们。每个当官的都有属于自己的小团体，当家眷管家发生摩擦磕碰的时候（包括和其他官员的家眷管家），都是要优先看当官的也就是主子的脸色。</code></pre><h2 id="6-例子"><a href="#6-例子" class="headerlink" title="6.例子"></a>6.例子</h2><p>1.对于包含有position:relative/position:absolute的定位元素，以及FireFox/IE浏览器（不包括Chrome等webkit内核浏览器）下含有position:fixed声明的定位元素，当其z-index值不是auto的时候，会创建层叠上下文。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position:relative; z-index:auto;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"mm1.jpg"</span> <span class="attr">style</span>=<span class="string">"position:absolute; z-index:2;"</span>&gt;</span>    <span class="tag">&lt;<span class="name">--</span> 图<span class="attr">1--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position:relative; z-index:auto;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"mm2.jpg"</span> <span class="attr">style</span>=<span class="string">"position:relative; z-index:1;"</span>&gt;</span>    <span class="tag">&lt;<span class="name">--</span> 图<span class="attr">2</span> <span class="attr">--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">--</span> 图<span class="attr">1</span>在上 <span class="attr">--</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position:relative; z-index:0;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"mm1.jpg"</span> <span class="attr">style</span>=<span class="string">"position:absolute; z-index:2;"</span>&gt;</span>    <span class="tag">&lt;<span class="name">--</span> 图<span class="attr">1--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position:relative; z-index:0;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"mm2.jpg"</span> <span class="attr">style</span>=<span class="string">"position:relative; z-index:1;"</span>&gt;</span>    <span class="tag">&lt;<span class="name">--</span> 图<span class="attr">2</span> <span class="attr">--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">--</span> 图<span class="attr">2</span>在上 <span class="attr">--</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.CSS3的层叠上下文（以下情况都能创建层级上下文）</p><ul><li><p>z-index值不为auto的flex项(父元素display:flex|inline-flex).</p></li><li><p>元素的transform值不是none.</p></li><li><p>元素mix-blend-mode值不是normal.</p></li><li><p>元素的filter值不是none.</p></li><li><p>元素的isolation值是isolate.</p></li><li><p>will-change指定的属性值为上面任意一个。</p></li><li><p>元素的-webkit-overflow-scrolling设为touch.</p><h2 id="7-层叠上下文与层叠顺序"><a href="#7-层叠上下文与层叠顺序" class="headerlink" title="7.层叠上下文与层叠顺序"></a>7.层叠上下文与层叠顺序</h2></li><li><p>如果层叠上下文元素不依赖z-index数值，则其层叠顺序是z-index:auto可看成z:index:0级别；</p></li><li><p>如果层叠上下文元素依赖z-index数值，则其层叠顺序由z-index值决定。</p></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/xianhaiyuan/p/5331134.html" target="_blank" rel="noopener">博客</a></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>布局和盒子模型</title>
      <link href="/2019/12/13/%E6%B5%81%E4%BD%93%E5%B8%83%E5%B1%80%E5%92%8C%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/12/13/%E6%B5%81%E4%BD%93%E5%B8%83%E5%B1%80%E5%92%8C%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><p>css最基础的知识<br><img src="/images/layout_template.png" alt="盒子模型"><br>标准盒模型：  </p><ul><li>一个块的总宽度= width + margin(左右) + padding(左右) + border(左右)<br>IE盒模型或怪异盒模型显而易见的区别就是：  </li><li>一个块的总宽度= width + margin(左右)（即width已经包含了padding和border值）<h1 id="布局方式"><a href="#布局方式" class="headerlink" title="布局方式"></a>布局方式</h1></li><li>常见布局方式：标准流、浮动、定位。  </li><li>布局流：grid布局，流体布局，响应式布局，float布局，flex布局<h3 id="流体布局"><a href="#流体布局" class="headerlink" title="流体布局"></a>流体布局</h3><a id="more"></a></li><li>流体布局设计随着用户对浏览器窗口的扩大或缩小而伸展或收缩。这种设计通常使用百分数。<br>优势  </li><li>1页面会伸展到整个浏览器窗口，所以即使在大屏幕上，页面的周围 也没有空白；  </li><li>2如果用户的窗口很小，页面就会收缩以适应窗口，而不必横向滚动；  </li><li>3即使用户设置的字体比设计人预设的更大，这种设计也可以适应（因为页面可以伸展）。<br>劣势  </li><li>1如果不对页面各个部分的宽度加以控制，那么页面设计会和预期的效果大相径庭，例如某些项目或元素挤压到一起，其周围出现意想不到的空隙；  </li><li>2如果用户的窗口非常宽，文本行就会很长，以至于难以阅读；  </li><li>3如果用户的窗口非常窄，单词可能会被挤压，导致每行只有几个单词；  </li><li>4如果一个固定宽度的元素位于一个不能容纳它的盒子里，那么这个元素就会溢出盒子。<h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2></li><li>Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为 Flex 布局。行内元素也可以使用 Flex 布局。(display: inline-flex;)<blockquote><p>注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。</p></blockquote></li><li>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。<h3 id="容器的六个属性"><a href="#容器的六个属性" class="headerlink" title="容器的六个属性"></a>容器的六个属性</h3></li><li>flex-direction: row | row-reverse | column | column-reverse; (主轴方向)<ul><li>row（默认值）：主轴为水平方向，起点在左端;<br>row-reverse：主轴为水平方向，起点在右端;<br>column：主轴为垂直方向，起点在上沿;<br>column-reverse：主轴为垂直方向，起点在下沿;</li></ul></li><li>flex-wrap: nowrap | wrap | wrap-reverse; (换行方法)<ul><li>换行， 第一行在上面，第二行在下面</li></ul></li><li>flex-flow：<flex-direction> || <flex-wrap>;<ul><li>上面两个属性的简写</li></ul></li><li>justify-content： flex-start | flex-end | center | space-between | space-around;（主轴对齐方式）<ul><li>flex-start（默认值）：左对齐<br>flex-end：右对齐<br>center： 居中<br>space-between：两端对齐，项目之间的间隔都相等。<br>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul></li><li>align-items:  flex-start | flex-end | center | baseline | stretch;（交叉轴对齐方式）<ul><li>flex-start：交叉轴的起点对齐。<br>flex-end：交叉轴的终点对齐。<br>center：交叉轴的中点对齐。<br>baseline: 项目的第一行文字的基线对齐。<br>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul></li><li>align-content： flex-start | flex-end | center | space-between | space-around | stretch; (多轴对齐方式)<ul><li>如果项目只有一根轴线，该属性不起作用<h3 id="项目的六个属性"><a href="#项目的六个属性" class="headerlink" title="项目的六个属性"></a>项目的六个属性</h3></li></ul></li><li>order: &lt; integer&gt;;（属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。）</li><li>flex-grow:&lt; number&gt;(属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大）</li><li>flex-shrink:&lt; number&gt;(同上，为缩小）</li><li>flex-basis：&lt; length&gt; | auto; /* default auto */  <ul><li>定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</li></ul></li><li>flex: none | [ &lt;’flex-grow’&gt; &lt;’flex-shrink’&gt;? || &lt;’flex-basis’&gt; ]（上面三个的简写）</li><li>align-self: auto | flex-start | flex-end | center | baseline | stretch;<ul><li>允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。该属性可能取6个值，除了auto，其他都与align-items属性完全一致。<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="利用flex布局实现列表flow-wrap效果"><a href="#利用flex布局实现列表flow-wrap效果" class="headerlink" title="利用flex布局实现列表flow wrap效果"></a>利用flex布局实现列表flow wrap效果</h3></li><li>代码<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>利用flex布局实现列表flow wrap效果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    *&#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    html,body&#123;</span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        flex-wrap: wrap;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 150px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box_li</span>&#123;</span></span><br><span class="line">        width: 150px;</span><br><span class="line">        height: 150px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#f5f</span>;</span></span><br><span class="line">        margin: 5px;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_li"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_li"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_li"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_li"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_li"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_li"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_li"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_li"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_li"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_li"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li>演示<br><a href="https://guofes.github.io/learn/css/flow_wrap">演示</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>box-shadow基础和实战运用</title>
      <link href="/2019/12/13/box-shadow%E5%9F%BA%E7%A1%80%E5%92%8C%E5%AE%9E%E6%88%98%E8%BF%90%E7%94%A8/"/>
      <url>/2019/12/13/box-shadow%E5%9F%BA%E7%A1%80%E5%92%8C%E5%AE%9E%E6%88%98%E8%BF%90%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-box-shadow定义与语法"><a href="#1-box-shadow定义与语法" class="headerlink" title="1.box-shadow定义与语法"></a>1.box-shadow定义与语法</h2><ul><li>box-shadow阴影（外阴影与外发光）性向box添加一个或多个阴影。<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: <span class="selector-tag">offset-x</span> <span class="selector-tag">offset-y</span> <span class="selector-tag">blur</span> <span class="selector-tag">spread</span> <span class="selector-tag">color</span> <span class="selector-tag">inset</span>;</span><br><span class="line"><span class="selector-tag">box-shadow</span>: <span class="selector-tag">X</span>轴偏移量 <span class="selector-tag">Y</span>轴偏移量 <span class="selector-attr">[阴影模糊半径]</span> <span class="selector-attr">[阴影扩展]</span> <span class="selector-attr">[阴影颜色]</span> <span class="selector-attr">[投影方式]</span>;</span><br></pre></td></tr></table></figure><h3 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h3></li><li>offset-x：必需，取值正负都可。offset-x水平阴影的位置。  </li><li>offset-y：必需，取值正负都可。offset-y垂直阴影的位置。  </li><li>blur:可选，只能取正值。blur-radius阴影模糊半径，0即无模糊效果，值越大阴影边缘越模糊。  </li><li>spread：可选，取值正负都可。spread代表阴影的周长向四周扩展的尺寸，正值，阴影扩大，负值阴影缩小。  </li><li>color: 可选。阴影的颜色。如果不设置，浏览器会取默认颜色，通常是黑色，但各浏览器默认颜色有差异，建议不要省略。可以是rgb(250,0,0)，也可以是有透明值的rgba(250,0,0,0.5)。   </li><li>inset:可选。关键字，将外部投影(默认outset)改为内部投影。inset 阴影在背景之上，内容之下。<a id="more"></a><h3 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h3><img src="/images/pasted-0.png" alt="浏览器支持"></li><li>-webkit-:  &emsp;10.0;  </li><li>IE: &emsp; 9.0.0;  </li><li>-moz:  &emsp;4.0 (2.0)[3] || 3.5(1.9.1)  </li><li>-webkit: &emsp; 5.1[1] || 3.0  </li><li>-o-: &emsp;10.5[1]<br>说明：第一个数字表示支持该属性的第一个浏览器版本号，  </li></ul><p>-webkit-, -ms- 或 -moz- 后的第二个数字为支持该前缀属性的第一个浏览器版本号。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="实现精彩365商品列表卡片半圆缺角效果"><a href="#实现精彩365商品列表卡片半圆缺角效果" class="headerlink" title="实现精彩365商品列表卡片半圆缺角效果"></a>实现精彩365商品列表卡片半圆缺角效果</h3><ul><li>代码<pre><code class="html"></code></pre></li><li>实现了，但是和阴影没有什么关系。。。。。<br><a href="https://guofes.github.io/learn/css/box_shadow/">演示</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css 垂直水平居中</title>
      <link href="/2019/12/12/css-%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
      <url>/2019/12/12/css-%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="1-宽度已知"><a href="#1-宽度已知" class="headerlink" title="1.宽度已知"></a>1.宽度已知</h2><h3 id="如下面所示要center垂直居中于wrapper"><a href="#如下面所示要center垂直居中于wrapper" class="headerlink" title="如下面所示要center垂直居中于wrapper"></a>如下面所示要center垂直居中于wrapper</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 公共代码</span><br><span class="line">&lt;div class="wrapper"&gt;</span><br><span class="line">    &lt;div class= "center"&gt;center&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: green;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-absolute-负margin"><a href="#1-1-absolute-负margin" class="headerlink" title="1.1 absolute + 负margin"></a>1.1 absolute + 负margin</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="1-2-text-align-line-height"><a href="#1-2-text-align-line-height" class="headerlink" title="1.2.text-align + line-height"></a>1.2.text-align + line-height</h3><p>仅适用于文字,且外层高度已知</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span>&#123;</span><br><span class="line">     <span class="attribute">text-align</span>: center;</span><br><span class="line">     <span class="attribute">line-height</span>: <span class="number">150px</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-calc"><a href="#1-3-calc" class="headerlink" title="1.3.calc"></a>1.3.calc</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">margin-left</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">50px</span>);</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">50px</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-absolute-calc"><a href="#1-4-absolute-calc" class="headerlink" title="1.4.absolute + calc"></a>1.4.absolute + calc</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: relative</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">50px</span>);</span><br><span class="line">   <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">50px</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-宽度未知"><a href="#2-宽度未知" class="headerlink" title="2.宽度未知"></a>2.宽度未知</h2><h3 id="如下面所示要center垂直居中于wrapper-1"><a href="#如下面所示要center垂直居中于wrapper-1" class="headerlink" title="如下面所示要center垂直居中于wrapper"></a>如下面所示要center垂直居中于wrapper</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 公共代码</span><br><span class="line">&lt;div class="wrapper"&gt;</span><br><span class="line">    &lt;div class= "center"&gt;center&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="2-1-flex布局"><a href="#2-1-flex布局" class="headerlink" title="2.1. flex布局"></a>2.1. flex布局</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-transform-absolute"><a href="#2-2-transform-absolute" class="headerlink" title="2.2.transform + absolute"></a>2.2.transform + absolute</h3><p>这个组合，常用于图片的居中显示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-flex-margin"><a href="#2-3-flex-margin" class="headerlink" title="2.3.flex + margin"></a>2.3.flex + margin</h3><p>这是 flex 方法的变种。父级元素设置 flex，子元素设置 margin: auto;。可以理解为子元素被四周的 margin “挤” 到了中间</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.warpper</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:flex</span><br><span class="line">&#125;</span><br><span class="line"> <span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-table-cell"><a href="#2-4-table-cell" class="headerlink" title="2.4.table-cell"></a>2.4.table-cell</h3><p>利用 table 的单元格居中效果展示。好像也只适用于文字</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-absolute-四个方向的值相等"><a href="#2-5-absolute-四个方向的值相等" class="headerlink" title="2.5.absolute + 四个方向的值相等"></a>2.5.absolute + 四个方向的值相等</h3><p>使用绝对定位布局，设置 margin:auto;，并设置 top、left、right、bottom 的 值相等即可（不一定要都是 0）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.warpper</span> &#123;</span><br><span class="line"><span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="selector-class">.center</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>: absolute;</span><br><span class="line">   <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">buttom</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-grid"><a href="#2-6-grid" class="headerlink" title="2.6.grid"></a>2.6.grid</h3><p>像表格一样，网格布局让我们能够按行或列来对齐元素。 然而在布局上，网格比表格更可能做到或更简单。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: center;</span><br><span class="line">    <span class="attribute">justify-self</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-7-after（有问题）"><a href="#2-7-after（有问题）" class="headerlink" title="2.7.::after（有问题）"></a>2.7.::after（有问题）</h3><p>伪元素也能用来实现居中么？感觉还是挺神奇的，</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><a href="https://guofes.github.io/learn/css/center">演示地址</a></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css position理解和应用</title>
      <link href="/2019/12/12/css-position%E7%90%86%E8%A7%A3%E5%92%8C%E5%BA%94%E7%94%A8/"/>
      <url>/2019/12/12/css-position%E7%90%86%E8%A7%A3%E5%92%8C%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-属性和意义"><a href="#1-属性和意义" class="headerlink" title="1.属性和意义"></a>1.属性和意义</h2><h3 id="1-1定义"><a href="#1-1定义" class="headerlink" title="1.1定义"></a>1.1定义</h3><p>1、static：static是所有元素的默认属性，也就是可以理解为正常的文档流<br>2、relative：relative是相对于自己文档的位置来定位的，对旁边的元素没有影响,不会脱离文档流<br>3、absolute：是相对于父级非position:static 浏览器定位<br>    &emsp;3.1如果没有任何一个父级元素是非position:static属性，则会相对于文档定位。<br>    &emsp;3.2这里它的父级元素是包含爷爷级元素、祖爷爷级元素、祖宗级元素的。任意一级    &emsp;都可以。<br>    &emsp;3.3如果它的父级元素和爷爷级元素都是非position:static 属性，则，它会选择距    &emsp;离最近    的父元素。<br>4、fixed；相对于浏览器窗口来定位的。不会因为滚动条滚动<br>5、sticky:是css定位新增属性；可以说是相对定位relative和固定定位fixed的结合；它主要用在对scroll事件的监听上；简单来说，在滑动过程中，某个元素距离其父元素的距离达到sticky粘性定位的要求时(比如top：100px)；position:sticky这时的效果相当于fixed定位，固定到适当位置。</p><a id="more"></a><h3 id="1-2用法"><a href="#1-2用法" class="headerlink" title="1.2用法"></a>1.2用法</h3><p>1.static：默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）<br>2.relative：生成相对定位的元素，相对于其正常位置进行定位。因此，”left:20” 会向元素的 LEFT 位置添加 20 像素<br>3.absolute：生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。<br>元素的位置通过left,top,right以及bottom属性进行规定<br>4.fixed：生成绝对定位的元素，相对于浏览器窗口进行定位，素的位置通过left,top,right以及bottom属性进行规定<br>5.sticky:下面元素的距离达到sticky粘性定位的要求时(比如top：100px)；position:sticky这时的效果相当于fixed定位，固定到适当位置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: sticky;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用条件:<br>&emsp;1、父元素不能overflow:hidden或者overflow:auto属性。<br>&emsp;2、必须指定top、bottom、left、right4个值之一，否则只会处于相对定位<br>&emsp;3、父元素的高度不能低于sticky元素的高度<br>&emsp;4、sticky元素仅在其父元素内生效<br>6.inherit：规定应该从父元素继承 position 属性的值。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="实现支付宝我的账单sticky效果和推移效果"><a href="#实现支付宝我的账单sticky效果和推移效果" class="headerlink" title="实现支付宝我的账单sticky效果和推移效果"></a>实现支付宝我的账单sticky效果和推移效果</h3><p>因为sticky元素仅在其父元素内生效，所以在外层加一层div可实现推移</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>实现支付宝我的账单sticky效果和推移效果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        *&#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        html,body&#123;</span><br><span class="line">            height: 100%;</span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.head</span>&#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content</span>&#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 80vh;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* padding-left: 20px; */</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-top</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#f0f0f0</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box_li</span>&#123;     </span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#f5f5f5</span>;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 40px;     </span><br><span class="line">            position: sticky;</span><br><span class="line">            line-height: 40px;</span><br><span class="line">            padding-left: 20px;</span><br><span class="line">            top: 50px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"head"</span>&gt;</span>头部，高50px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_ul"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_li"</span>&gt;</span>一月<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>内容区域，高80vh<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_ul"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_li"</span>&gt;</span>二月<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>内容区域，高80vh<span class="tag">&lt;/<span class="name">div</span>&gt;</span>         </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_ul"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_li"</span>&gt;</span>三月<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>内容区域，高80vh<span class="tag">&lt;/<span class="name">div</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_ul"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_li"</span>&gt;</span>四月<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>内容区域，高80vh<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_ul"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_li"</span>&gt;</span>五月<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>内容区域，高80vh<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_ul"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_li"</span>&gt;</span>六月<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>内容区域，高80vh<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><a href="https://guofes.github.io/learn/css/sticky">演示</a></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初心</title>
      <link href="/2019/12/11/hello-world/"/>
      <url>/2019/12/11/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="已经一年没有维护自己的博客，借着回顾基础知识的机会不定期更新博客，学习想学的知识，记录所想所悟"><a href="#已经一年没有维护自己的博客，借着回顾基础知识的机会不定期更新博客，学习想学的知识，记录所想所悟" class="headerlink" title="已经一年没有维护自己的博客，借着回顾基础知识的机会不定期更新博客，学习想学的知识，记录所想所悟"></a>已经一年没有维护自己的博客，借着回顾基础知识的机会不定期更新博客，学习想学的知识，记录所想所悟</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console,<span class="built_in">log</span>(<span class="string">'这世上所有的遗憾都是当时人能力的不足'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 不忘初心 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
